<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ostlo&#39;s Blog</title>
  
  
  <link href="/ostlo/atom.xml" rel="self"/>
  
  <link href="https://ghostlo.github.io/ostlo/"/>
  <updated>2019-04-06T08:40:02.000Z</updated>
  <id>https://ghostlo.github.io/ostlo/</id>
  
  <author>
    <name>Ostlo_TL</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库事务的四大特性以及事务的隔离级别</title>
    <link href="https://ghostlo.github.io/ostlo/2019/04/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7%E4%BB%A5%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>https://ghostlo.github.io/ostlo/2019/04/06/数据库事务的四大特性以及事务的隔离级别/</id>
    <published>2019-04-06T08:38:07.000Z</published>
    <updated>2019-04-06T08:40:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/fjdingsd/p/5273008.html" target="_blank" rel="noopener">来源</a></p><p>　　如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：</p><h2 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h2><p>　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p><h2 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h2><p>　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><p>　　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p><h2 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h2><p>　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p><p>　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p><h2 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h2><p>　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><p>　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p><p>　　以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p><h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><p>　　脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p><p>　　当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update account set money=money+100 where name=’B’;  (此时A通知B)</span><br><span class="line"></span><br><span class="line">update account set money=money - 100 where name=’A’;</span><br></pre></td></tr></table></figure><p>　　当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。</p><h2 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h2><p>　　不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。</p><p>　　例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p><p>　　不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</p><p>　　在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……</p><h2 id="虚读-幻读"><a href="#虚读-幻读" class="headerlink" title="虚读(幻读)"></a>虚读(幻读)</h2><p>　　幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p><p>　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</p><p>　　现在来看看MySQL数据库为我们提供的四种隔离级别：</p><p>　　① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。</p><p>　　② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。</p><p>　　③ Read committed (读已提交)：可避免脏读的发生。</p><p>　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。</p><p>　　以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。</p><p>　　在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)；而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。</p><p>　　在MySQL数据库中查看当前事务的隔离级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@tx_isolation;</span><br></pre></td></tr></table></figure><p>　　在MySQL数据库中设置事务的隔离 级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set  [glogal | session]  transaction isolation level 隔离级别名称;</span><br><span class="line"></span><br><span class="line">set tx_isolation=’隔离级别名称;’</span><br></pre></td></tr></table></figure><p>例1：查看当前事务的隔离级别：</p><p>　　<img src="https://images2015.cnblogs.com/blog/787876/201603/787876-20160313202200007-1111796802.png" alt="img"></p><p>例2：将事务的隔离级别设置为Read uncommitted级别：</p><p>　　<img src="https://images2015.cnblogs.com/blog/787876/201603/787876-20160313202224241-2101542210.png" alt="img"></p><p>或：</p><p>　　<img src="https://images2015.cnblogs.com/blog/787876/201603/787876-20160313202245210-345198166.png" alt="img"></p><p>记住：设置数据库的隔离级别一定要是在开启事务之前！</p><p>　　如果是使用JDBC对数据库的事务设置隔离级别的话，也应该是在调用Connection对象的setAutoCommit(false)方法之前。调用Connection对象的setTransactionIsolation(level)即可设置当前链接的隔离级别，至于参数level，可以使用Connection对象的字段：</p><p>　　<img src="https://images2015.cnblogs.com/blog/787876/201603/787876-20160313202333460-377269897.png" alt="img"></p><p>在JDBC中设置隔离级别的部分代码：</p><p>　　<img src="https://images2015.cnblogs.com/blog/787876/201603/787876-20160313202355694-2106931487.png" alt="img"></p><p>　　后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。</p><p>参考博客：</p><p><a href="http://www.zhihu.com/question/23989904" target="_blank" rel="noopener">http://www.zhihu.com/question/23989904</a></p><p><a href="http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html</a></p><p><a href="http://www.cnblogs.com/xdp-gacl/p/3984001.html" target="_blank" rel="noopener">http://www.cnblogs.com/xdp-gacl/p/3984001.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/fjdingsd/p/5273008.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;来源&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://ghostlo.github.io/ostlo/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>面试--抛棋子</title>
    <link href="https://ghostlo.github.io/ostlo/2019/04/06/%E9%9D%A2%E8%AF%95-%E6%8A%9B%E6%A3%8B%E5%AD%90/"/>
    <id>https://ghostlo.github.io/ostlo/2019/04/06/面试-抛棋子/</id>
    <published>2019-04-06T08:36:07.000Z</published>
    <updated>2019-04-06T09:24:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有一个一百层高的大厦，从这个大厦的某一层扔下棋子恰好就会碎（称这一层为临界层）。请你用手中的两个玻璃围棋子，找出一个最优的策略来得出那个最优层。<br>分析：题目要求策略最优，因而要使得在最坏的情况下投掷的总次数$T_{max}$ 最少。首先考虑只有一个棋子的情况，条件若为多个棋子则可转化为一个棋子的情况。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="一个棋子"><a href="#一个棋子" class="headerlink" title="一个棋子"></a>一个棋子</h3><p>棋子必须在临界层扔下的时候碎，所以唯一的策略是从1层往上逐层投掷，此时$T_{max} =99$，临界层为99层或100层（因为题目告诉100层肯定会碎，如果99层没碎，那表示临界层即为100）</p><h3 id="两个棋子"><a href="#两个棋子" class="headerlink" title="两个棋子"></a>两个棋子</h3><p>利用多的这个棋子缩小查找的范围，因而把100层分成若干段：先利用一个棋子来确定临界层所在的段，再利用另一个棋子确定临界层，总的投掷次数等于确定临界段的次数$n<em>{1}$和确定临界层的次数$n</em>{2}$的和<br>现把100层平均分成n段（n是100的正因数），有$T<em>{max}<script type="math/tex">=</script>(n-1)<script type="math/tex">+</script>\frac{100}{n-1}<script type="math/tex">=</script>n<script type="math/tex">+</script>\frac{100}{n}-2$由均值不等式可知n=10时，$T</em>{max} =18$为最小值，此时临界段为第80~90层，临界层为第89层。如果把100层分成12段$(100=9\times 11+1)$：1~9,10~18,…91~99,100,与上述n=10的情况相比虽然每段的层数在减少（从而$n<em>{1}$在减少），但所分的段数在增加（从而$n</em>{2}$在增加），因而$T<em>{max}$并没有减少。如果把100层分成其他段（比如9段：$100=12\times 8+4$，情况也是如此.<br>根据上面的讨论，如何把100层合理地分段是关键。上述对100层所分段数的调整并没有使得$T</em>{max} =18$减少的原因在于每段包含的层数比较均匀(图1)，因而出现$n<em>{1}$和$n</em>{2}$此消彼长的情况。鉴于此我们做出以下方式的调整：<br>把100层分成若干段，从下往上，每段的层数逐渐少1（图2），这样就使得在最坏的情况下，$n<em>{1}$增加1的同时$n</em>{2}$减少1，因而$n<em>{1}$与$n</em>{2}$的总和不变（等于第一段的层数n）,为确定n的值，只需要解不等式$n+(n-1)+(n-2)+…+1\geq 100$,从而得到n=14<br>从第14层开始扔第一枚棋子，如果没有碎则从第14+13=27层开始扔，如果还没有碎则从14+13+12=39层开始扔，以此类推，此时$T_{max} =14$,临界层可为第27层，第39层，…第99层。</p><h2 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h2><p>对于m层楼高，k个球的扔棋子问题，又该怎么做？<br>答案是用动态规划的思想：如果是三个棋子，100层楼，我扔了一次棋子碎了以后，就变成2个棋子的问题了，因此可以利用上面的结果：<br>$（x<em>(x-1)/2+((x-1)</em>(x-2)/2)+…+3+1&gt;=100. $</p><h3 id="推广"><a href="#推广" class="headerlink" title="推广"></a>推广</h3><p>从上面的讨论可以发现此题的关键是（高阶）等差数列：<br>两个棋子：1 2 3 4 5…$\sum<em>{i=1}^{n}{C</em>{i}^{1} \geq }100$!<br>三个棋子：1 3 6 10 15…. $\sum<em>{i=2}^{n}{C</em>{i}^{2} }\geq 100$<br>因而我们还可以考虑大楼有m层，棋子有k个的情况 $\sum<em>{ i=k}^{n}{C</em>{i}^{k} }  \geq m$<br>算法证明：对 $m$ 层楼，k个棋子的问题，存在复杂度为 $O(m^(1/k))$ 的算法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;有一个一百层高的大厦，从这个大厦的某一层扔下棋子恰好就会碎（称这一层为临界层）。请你用手中的两个玻璃围棋子，找出一个最优的策略来得出那个最优
      
    
    </summary>
    
    
      <category term="面试" scheme="https://ghostlo.github.io/ostlo/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>cookie 与 session 的区别</title>
    <link href="https://ghostlo.github.io/ostlo/2019/04/04/cookie-%E4%B8%8E-session-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://ghostlo.github.io/ostlo/2019/04/04/cookie-与-session-的区别/</id>
    <published>2019-04-04T12:26:55.000Z</published>
    <updated>2019-04-04T12:29:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://link.juejin.im/?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzA4MjA0MTc4NQ%3D%3D%26mid%3D504090000%26idx%3D3%26sn%3Df57d4f194c902daadd80296d5b8ed001%23rd" target="_blank" rel="noopener">mp.weixin.qq.com</a></p><p>本文分别对Cookie与Session做一个介绍和总结，并分别对两个知识点进行对比分析，让大家对Cookie和Session有一个更深入的了解，并对自己的开发工作中灵活运用带来启示。</p><h2 id="cookie机制"><a href="#cookie机制" class="headerlink" title="cookie机制"></a><strong>cookie机制</strong></h2><p>Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器。IETF RFC 2965 HTTP State Management Mechanism 是通用cookie规范。网络服务器用HTTP头向客户端发送cookies，在客户终端，浏览器解析这些cookies并将它们保存为一个本地文件，它会自动将同一服务器的任何请求缚上这些cookies 。</p><p>具体来说cookie机制采用的是在客户端保持状态的方案。它是在用户端的会话状态的存贮机制，他需要用户打开客户端的cookie支持。cookie的作用就是为了解决HTTP协议无状态的缺陷所作的努力。</p><p>正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。</p><p>cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。</p><p>而session机制采用的是一种在服务器端保持状态的解决方案。同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的。而session提供了方便管理全局变量的方式 。</p><p>session是针对每一个用户的，变量的值保存在服务器上，用一个sessionID来区分是哪个用户session变量,这个值是通过用户的浏览器在访问的时候返回给服务器，当客户禁用cookie时，这个值也可能设置为由get来返回给服务器。</p><p>就安全性来说：当你访问一个使用session 的站点，同时在自己机子上建立一个cookie，建议在服务器端的session机制更安全些，因为它不会任意读取客户存储的信息。</p><h2 id="session机制"><a href="#session机制" class="headerlink" title="session机制"></a><strong>session机制</strong></h2><p>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。</p><p>当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。</p><p>保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发挥给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。</p><p>经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。</p><p>Cookie与Session都能够进行会话跟踪，但是完成的原理不太一样。普通状况下二者均能够满足需求，但有时分不能够运用Cookie，有时分不能够运用Session。下面经过比拟阐明二者的特性以及适用的场所。</p><h2 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h2><h3 id="1、存取方式的不同"><a href="#1、存取方式的不同" class="headerlink" title="1、存取方式的不同"></a><strong>1、存取方式的不同</strong></h3><p>Cookie中只能保管ASCII字符串，假如需求存取Unicode字符或者二进制数据，需求先进行编码。Cookie中也不能直接存取Java对象。若要存储略微复杂的信息，运用Cookie是比拟艰难的。</p><p>而Session中能够存取任何类型的数据，包括而不限于String、Integer、List、Map等。Session中也能够直接保管Java Bean乃至任何Java类，对象等，运用起来十分便当。能够把Session看做是一个Java容器类。</p><h3 id="2、隐私策略的不同"><a href="#2、隐私策略的不同" class="headerlink" title="2、隐私策略的不同"></a><strong>2、隐私策略的不同</strong></h3><p>Cookie存储在客户端阅读器中，对客户端是可见的，客户端的一些程序可能会窥探、复制以至修正Cookie中的内容。而Session存储在服务器上，对客户端是透明的，不存在敏感信息泄露的风险。</p><p>假如选用Cookie，比较好的方法是，敏感的信息如账号密码等尽量不要写到Cookie中。最好是像Google、Baidu那样将Cookie信息加密，提交到服务器后再进行解密，保证Cookie中的信息只要本人能读得懂。而假如选择Session就省事多了，反正是放在服务器上，Session里任何隐私都能够有效的保护。</p><h3 id="3、有效期上的不同"><a href="#3、有效期上的不同" class="headerlink" title="3、有效期上的不同"></a><strong>3、有效期上的不同</strong></h3><p>使用过Google的人都晓得，假如登录过Google，则Google的登录信息长期有效。用户不用每次访问都重新登录，Google会持久地记载该用户的登录信息。要到达这种效果，运用Cookie会是比较好的选择。只需要设置Cookie的过期时间属性为一个很大很大的数字。</p><p>由于Session依赖于名为JSESSIONID的Cookie，而Cookie JSESSIONID的过期时间默许为–1，只需关闭了阅读器该Session就会失效，因而Session不能完成信息永世有效的效果。运用URL地址重写也不能完成。而且假如设置Session的超时时间过长，服务器累计的Session就会越多，越容易招致内存溢出。</p><h3 id="4、服务器压力的不同"><a href="#4、服务器压力的不同" class="headerlink" title="4、服务器压力的不同"></a><strong>4、服务器压力的不同</strong></h3><p>Session是保管在服务器端的，每个用户都会产生一个Session。假如并发访问的用户十分多，会产生十分多的Session，耗费大量的内存。因而像Google、Baidu、Sina这样并发访问量极高的网站，是不太可能运用Session来追踪客户会话的。</p><p>而Cookie保管在客户端，不占用服务器资源。假如并发阅读的用户十分多，Cookie是很好的选择。关于Google、Baidu、Sina来说，Cookie或许是唯一的选择。</p><h3 id="5、浏览器支持的不同"><a href="#5、浏览器支持的不同" class="headerlink" title="5、浏览器支持的不同"></a><strong>5、浏览器支持的不同</strong></h3><p>Cookie是需要客户端浏览器支持的。假如客户端禁用了Cookie，或者不支持Cookie，则会话跟踪会失效。关于WAP上的应用，常规的Cookie就派不上用场了。</p><p>假如客户端浏览器不支持Cookie，需要运用Session以及URL地址重写。需要注意的是一切的用到Session程序的URL都要进行URL地址重写，否则Session会话跟踪还会失效。关于WAP应用来说，Session+URL地址重写或许是它唯一的选择。</p><p>假如客户端支持Cookie，则Cookie既能够设为本浏览器窗口以及子窗口内有效（把过期时间设为–1），也能够设为一切阅读器窗口内有效（把过期时间设为某个大于0的整数）。但Session只能在本阅读器窗口以及其子窗口内有效。假如两个浏览器窗口互不相干，它们将运用两个不同的Session。（IE8下不同窗口Session相干）</p><h3 id="6、跨域支持上的不同"><a href="#6、跨域支持上的不同" class="headerlink" title="6、跨域支持上的不同"></a><strong>6、跨域支持上的不同</strong></h3><p>Cookie支持跨域名访问，例如将domain属性设置为“.biaodianfu.com”，则以“.biaodianfu.com”为后缀的一切域名均能够访问该Cookie。跨域名Cookie如今被普遍用在网络中，例如Google、Baidu、Sina等。而Session则不会支持跨域名访问。Session仅在他所在的域名内有效。</p><p>仅运用Cookie或者仅运用Session可能完成不了理想的效果。这时应该尝试一下同时运用Cookie与Session。Cookie与Session的搭配运用在实践项目中会完成很多意想不到的效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接：&lt;a href=&quot;https://link.juejin.im/?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzA4MjA0MTc4NQ%3D%3D%26mid%3D504090000%26idx%3D3
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>同步异步阻塞非阻塞</title>
    <link href="https://ghostlo.github.io/ostlo/2019/04/04/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5%E9%98%BB%E5%A1%9E%E9%9D%9E%E9%98%BB%E5%A1%9E/"/>
    <id>https://ghostlo.github.io/ostlo/2019/04/04/同步异步阻塞非阻塞/</id>
    <published>2019-04-04T12:26:17.000Z</published>
    <updated>2019-04-04T12:26:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="同步："><a href="#同步：" class="headerlink" title="同步："></a>同步：</h3><p>所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事。</p><p>例如普通B/S模式（同步）：提交请求-&gt;等待服务器处理-&gt;处理完毕返回 这个期间客户端浏览器不能干任何事</p><h3 id="异步："><a href="#异步：" class="headerlink" title="异步："></a>异步：</h3><p>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。</p><p>例如 ajax请求（异步）: 请求通过事件触发-&gt;服务器处理（这是浏览器仍然可以作其他事情）-&gt;处理完毕</p><h3 id="阻塞："><a href="#阻塞：" class="headerlink" title="阻塞："></a>阻塞：</h3><p>阻塞调用是指调用结果返回之前，当前线程会被挂起（线程进入非可执行状态，在这个状态下，cpu不会给线程分配时间片，即线程暂停运行）。函数只有在得到结果之后才会返回。</p><p>有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回,它还会抢占cpu去执行其他逻辑，也会主动检测io是否准备好。</p><h3 id="非阻塞："><a href="#非阻塞：" class="headerlink" title="非阻塞："></a>非阻塞：</h3><p>非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。</p><p>再简单点理解就是：</p><ol><li>同步，就是我调用一个功能，该功能没有结束前，我死等结果。</li><li>异步，就是我调用一个功能，不需要知道该功能结果，该功能有结果后通知我（回调通知）。</li><li>阻塞，就是调用我（函数），我（函数）没有接收完数据或者没有得到结果之前，我不会返回。</li><li>非阻塞，就是调用我（函数），我（函数）立即返回，通过select通知调用者</li></ol><p>同步IO和异步IO的区别就在于：数据拷贝的时候进程是否阻塞</p><p>阻塞IO和非阻塞IO的区别就在于：应用程序的调用是否立即返回</p><p>综上可知，同步和异步,阻塞和非阻塞,有些混用,其实它们完全不是一回事,而且它们修饰的对象也不相同。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;同步：&quot;&gt;&lt;a href=&quot;#同步：&quot; class=&quot;headerlink&quot; title=&quot;同步：&quot;&gt;&lt;/a&gt;同步：&lt;/h3&gt;&lt;p&gt;所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事。&lt;/p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo 安装</title>
    <link href="https://ghostlo.github.io/ostlo/2019/04/04/%E5%AE%89%E8%A3%85-Hexo/"/>
    <id>https://ghostlo.github.io/ostlo/2019/04/04/安装-Hexo/</id>
    <published>2019-04-04T11:38:48.000Z</published>
    <updated>2019-04-06T02:23:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先安装如下两个包</p><ul><li><p><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></p></li><li><p><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></p></li></ul><p>安装好之后初次运行Git需要做一些配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></p><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档</a></p><h3 id="npm安装时改源"><a href="#npm安装时改源" class="headerlink" title="npm安装时改源"></a>npm安装时改源</h3><p>npm 安装报错 rollbackFailedOptional verb npm-session 解决办法</p><p>npm config set registry <a href="http://registry.npm.taobao.org" target="_blank" rel="noopener">http://registry.npm.taobao.org</a></p><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p><code>Hexo</code>安装好了之后，就开始进行建站。打开终端<code>cd</code>到桌面并使用如下命令即可建好</p><blockquote><p>hexo init <code>name</code><br>cd <code>name</code></p></blockquote><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p>  <em>clean</em>     Remove generated files and cache.</p><p>  <em>deploy</em>    Deploy your website.</p><p>  <em>generate</em>  Generate static files.</p><p>  <em>help</em>      Get help on a command.</p><p>  <em>init</em>      Create a new Hexo folder.</p><p>  <em>new</em>       Create a new post.</p><p>  <em>server</em>    Start the server.</p><h3 id="deploy注意事项"><a href="#deploy注意事项" class="headerlink" title="deploy注意事项"></a>deploy注意事项</h3><p>1:排查-&gt;是否安装一下hexo-deployer-git这个模块<br> 没有安装:<code>npm install hexo-deployer-git --save</code>使用指令安装<br>2:排查-&gt;_config.yml 这个文件的deploy写了没有;写全了没有<br> 我的就是因为_config.yml中deploy下的type等前面没有空格导致。。。。。</p><p>hexo d 提示You should configure deployment settings in _config.yml first!</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type:</span><br><span class="line">    repo:</span><br></pre></td></tr></table></figure><p>hexo d/deploy 时遇到问题再试一次，可能是用户名密码没有来得及输入，， </p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">next主题</a></p><h3 id="deploy后github上未显示主题"><a href="#deploy后github上未显示主题" class="headerlink" title="deploy后github上未显示主题"></a>deploy后github上未显示主题</h3><p>If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child" target="_blank" rel="noopener">http://yoursite.com/child</a>‘ and root as ‘/child/‘<br>url: <a href="https://ghostlo.github.io/ostlo">https://ghostlo.github.io/ostlo</a><br>root: /ostlo/</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>后续的修改只需要重复第5步就可以了，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd 本地库目录</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;版本日志&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><a href="https://juejin.im/post/5b655c595188251b134e97dd" target="_blank" rel="noopener">Hexo 配置1</a></p><p><a href="https://www.jianshu.com/p/3a05351a37dc" target="_blank" rel="noopener">Hexo 配置2</a></p><p>GitHub还有很多好功能有待开发，善于利用搜索引擎，have fun~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;首先安装如下两个包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
      <category term="建站" scheme="https://ghostlo.github.io/ostlo/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="https://ghostlo.github.io/ostlo/tags/hexo/"/>
    
  </entry>
  
</feed>
