<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ostlo&#39;s Blog</title>
  
  
  <link href="/ostlo/atom.xml" rel="self"/>
  
  <link href="https://ghostlo.github.io/"/>
  <updated>2019-04-22T14:07:31.000Z</updated>
  <id>https://ghostlo.github.io/</id>
  
  <author>
    <name>Ostlo_TL</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go学习（二）</title>
    <link href="https://ghostlo.github.io/2019/04/22/Go%E5%AD%A6%E4%B9%A02/"/>
    <id>https://ghostlo.github.io/2019/04/22/Go学习2/</id>
    <published>2019-04-22T08:36:07.000Z</published>
    <updated>2019-04-22T14:07:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="go语言特点"><a class="markdownIt-Anchor" href="#go语言特点"></a> Go语言特点</h3><p>没有对象，没有继承多态，没有泛型，没有try/catch</p><p>有接口，函数是变成，csp并发模型</p><h3 id="变量类型"><a class="markdownIt-Anchor" href="#变量类型"></a> 变量类型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span>,<span class="keyword">string</span></span><br><span class="line">(u)<span class="keyword">int</span>,(u)<span class="keyword">int8</span>,(u)<span class="keyword">int16</span>,(u)<span class="keyword">int32</span>,(u)<span class="keyword">int64</span>,<span class="keyword">uintptr</span></span><br><span class="line"><span class="keyword">byte</span>,<span class="keyword">rune</span></span><br><span class="line"><span class="keyword">float32</span>,<span class="keyword">float64</span>,<span class="keyword">complex64</span>,<span class="keyword">complex128</span></span><br></pre></td></tr></table></figure><p>rune是个字符型（char），与utf-8与unicode编码接轨，是32位</p><p>complex64 float32+float32</p><p>complex128 float64+float64</p><p>在使用格式化说明符时，可以使用 <code>%v</code> 来表示复数，但当你希望只表示其中的一个部分的时候需要使用 <code>%f</code>。</p><p>类型转换是强制的，没有隐式变量转换</p><p>当进行类似 <code>a32bitInt = int32(a32Float)</code> 的转换时，小数点后的数字将被丢弃。这种情况一般发生当从取值范围较大的类型转换为取值范围较小的类型时，或者你可以写一个专门用于处理类型转换的函数来确保没有发生精度的丢失。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从 int 型转换为 int8：</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Uint8FromInt</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">uint8</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt;= n &amp;&amp; n &lt;= math.MaxUint8 &#123; <span class="comment">// conversion is safe</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">uint8</span>(n), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">"%d is out of the uint8 range"</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从 float64 转换为 int：</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IntFromFloat64</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> math.MinInt32 &lt;= x &amp;&amp; x &lt;= math.MaxInt32 &#123; <span class="comment">// x lies in the integer range</span></span><br><span class="line">whole, fraction := math.Modf(x)</span><br><span class="line"><span class="keyword">if</span> fraction &gt;= <span class="number">0.5</span> &#123;</span><br><span class="line">whole++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int</span>(whole)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"%g is out of the int32 range"</span>, x))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于整数和浮点数，你可以使用一元运算符 <code>++</code>（递增）和 <code>--</code>（递减），但只能用于后缀：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i++ -&gt; i += <span class="number">1</span> -&gt; i = i + <span class="number">1</span></span><br><span class="line">i-- -&gt; i -= <span class="number">1</span> -&gt; i = i - <span class="number">1</span></span><br></pre></td></tr></table></figure><p>同时，带有 <code>++</code> 和 <code>--</code> 的只能作为语句，而非表达式，因此 <code>n = i++</code> 这种写法是无效的，其它像 <code>f(i++)</code> 或者 <code>a[i]=b[i++]</code> 这些可以用于 C、C++ 和 Java 中的写法在 Go 中也是不允许的</p><p>在运算时 <strong>溢出</strong> 不会产生错误，Go 会简单地将超出位数抛弃。如果你需要范围无限大的整数或者有理数（意味着只被限制于计算机内存），你可以使用标准库中的 <code>big</code> 包，该包提供了类似 <code>big.Int</code> 和 <code>big.Rat</code> 这样的类型</p><h3 id="if"><a class="markdownIt-Anchor" href="#if"></a> if</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> filename=<span class="string">"trans/abc.txt"</span></span><br><span class="line"><span class="keyword">if</span> contents, err := ioutil.ReadFile(filename) ; err!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>,contents)</span><br><span class="line">fmt.Println(contents)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">abc</span></span><br><span class="line"><span class="comment">[97 98 99]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="switch"><a class="markdownIt-Anchor" href="#switch"></a> switch</h3><p>switch会自动break，除非使用fallthrough</p><h3 id="for"><a class="markdownIt-Anchor" href="#for"></a> for</h3><p>不需要括号，条件里可以省略初始条件，结束条件，递增表达式，另外for没有小括号</p><p>死循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iota"><a class="markdownIt-Anchor" href="#iota"></a> iota</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ByteSize <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">_ = <span class="literal">iota</span> <span class="comment">// 通过赋值给空白标识符来忽略值</span></span><br><span class="line">KB ByteSize = <span class="number">1</span>&lt;&lt;(<span class="number">10</span>*<span class="literal">iota</span>)</span><br><span class="line">MB</span><br><span class="line">GB</span><br><span class="line">TB</span><br><span class="line">PB</span><br><span class="line">EB</span><br><span class="line">ZB</span><br><span class="line">YB</span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> BitFlag <span class="keyword">int</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Active BitFlag = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// 1 &lt;&lt; 0 == 1</span></span><br><span class="line">Send <span class="comment">// 1 &lt;&lt; 1 == 2</span></span><br><span class="line">Receive <span class="comment">// 1 &lt;&lt; 2 == 4</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">flag := Active | Send <span class="comment">// == 3</span></span><br></pre></td></tr></table></figure><h3 id="可变函数列表"><a class="markdownIt-Anchor" href="#可变函数列表"></a> 可变函数列表</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumArgs</span><span class="params">(value ...<span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    sum:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:= <span class="keyword">range</span> values&#123;</span><br><span class="line">        sum+=values[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回值写最后</p><p>可以返回多个值</p><p>函数可以作为参数</p><p>没有默认参数</p><p>可以选参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eval</span><span class="params">(a,b <span class="keyword">int</span>, op <span class="keyword">string</span>)</span><span class="params">(<span class="keyword">int</span>, error)</span></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> op &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line"><span class="keyword">return</span> a+b,<span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line"><span class="keyword">return</span> a-b,<span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line"><span class="keyword">return</span> a*b,<span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">q, _ := div(a,b)</span><br><span class="line"><span class="keyword">return</span> q,<span class="literal">nil</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>,fmt.Errorf(</span><br><span class="line"><span class="string">"unsupported operation:%s"</span>,op)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">div</span><span class="params">(a,b <span class="keyword">int</span>)</span><span class="params">(q,r <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a/b, a%b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">apply</span><span class="params">(op <span class="keyword">func</span>(<span class="keyword">int</span>,<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">a</span>,<span class="title">b</span> <span class="title">int</span>)<span class="title">int</span></span> &#123;</span><br><span class="line">p:=reflect.ValueOf(op).Pointer()</span><br><span class="line">opName := runtime.FuncForPC(p).Name()</span><br><span class="line">fmt.Printf(<span class="string">"Calling function %s with args: "</span>+<span class="string">"(%d %d)\n"</span>,opName,a,b)</span><br><span class="line"><span class="keyword">return</span> op(a,b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int</span>(math.Pow(<span class="keyword">float64</span>(a),<span class="keyword">float64</span>(b)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span> <span class="params">(numbers ... <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">s:=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="keyword">range</span> numbers&#123;</span><br><span class="line">s+=numbers[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> result,err := eval(<span class="number">3</span>,<span class="number">4</span>,<span class="string">"x"</span>); err!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"Error"</span>,err)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line">q, r :=div(<span class="number">13</span>,<span class="number">3</span>)</span><br><span class="line">fmt.Println(q,r)</span><br><span class="line">fmt.Println(apply(<span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int</span>(math.Pow(</span><br><span class="line"><span class="keyword">float64</span>(a),<span class="keyword">float64</span>(b)))</span><br><span class="line">&#125;,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">fmt.Println(apply(pow,<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">fmt.Println(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">12</span> ,<span class="number">3</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Error unsupported operation:x</span></span><br><span class="line"><span class="comment">4 1</span></span><br><span class="line"><span class="comment">Calling function main.main.func1 with args: (3 4)</span></span><br><span class="line"><span class="comment">81</span></span><br><span class="line"><span class="comment">Calling function main.pow with args: (3 3)</span></span><br><span class="line"><span class="comment">27</span></span><br><span class="line"><span class="comment">22</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="指针"><a class="markdownIt-Anchor" href="#指针"></a> 指针</h3><p>go函数是传值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a,b *<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">*a,*b=*b,*a</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a,b :=<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">swap(&amp;a,&amp;b)</span><br><span class="line">fmt.Println(a,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a,b <span class="keyword">int</span>)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"><span class="keyword">return</span> b,a</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a,b :=<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">a,b = swap(a,b)</span><br><span class="line">fmt.Println(a,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3><p>可以用<code>_</code>省略一个值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line">arr2 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;</span><br><span class="line">arr3 := [...]<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">var</span> grid [<span class="number">4</span>][<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">fmt.Println(arr1,arr2,arr3)</span><br><span class="line">fmt.Println(grid)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,v:=<span class="keyword">range</span> arr3&#123;</span><br><span class="line">fmt.Println(i,v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组传入函数会拷贝</p><p>一般使用切片</p><h3 id="切片"><a class="markdownIt-Anchor" href="#切片"></a> 切片</h3><p>内部是一个视图</p><p>s1[4]不存在，但slice可以view取出来</p><p>不超过cap就可以view扩展出来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateSlice</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">s[<span class="number">0</span>]=<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line">fmt.Println(arr[<span class="number">2</span>:<span class="number">6</span>])</span><br><span class="line">fmt.Println(arr[:<span class="number">6</span>])</span><br><span class="line">fmt.Println(arr[<span class="number">2</span>:])</span><br><span class="line">fmt.Println(arr[:])</span><br><span class="line"></span><br><span class="line">s1:=arr[<span class="number">2</span>:]</span><br><span class="line">fmt.Println(s1)</span><br><span class="line">updateSlice(s1)</span><br><span class="line">fmt.Println(s1)</span><br><span class="line">s2:=arr[:]</span><br><span class="line">fmt.Println(s2)</span><br><span class="line">updateSlice(s2)</span><br><span class="line">fmt.Println(s2)</span><br><span class="line"></span><br><span class="line">s3 := <span class="built_in">append</span>(s2,<span class="number">10</span>)</span><br><span class="line">s4 := <span class="built_in">append</span>(s3,<span class="number">11</span>)</span><br><span class="line">s5 := <span class="built_in">append</span>(s4,<span class="number">12</span>)</span><br><span class="line">fmt.Println(<span class="string">"s3, s4, s5 = "</span>,s3,s4,s5)</span><br><span class="line">fmt.Println(<span class="string">"arr ="</span>, arr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[2 3 4 5]</span></span><br><span class="line"><span class="comment">[0 1 2 3 4 5]</span></span><br><span class="line"><span class="comment">[2 3 4 5 6 7]</span></span><br><span class="line"><span class="comment">[0 1 2 3 4 5 6 7]</span></span><br><span class="line"><span class="comment">[2 3 4 5 6 7]</span></span><br><span class="line"><span class="comment">[100 3 4 5 6 7]</span></span><br><span class="line"><span class="comment">[0 1 100 3 4 5 6 7]</span></span><br><span class="line"><span class="comment">[100 1 100 3 4 5 6 7]</span></span><br><span class="line"><span class="comment">s3, s4, s5 =  [100 1 100 3 4 5 6 7 10] [100 1 100 3 4 5 6 7 10 11] [100 1 100 3 4 5 6 7 10 11 12]</span></span><br><span class="line"><span class="comment">arr = [100 1 100 3 4 5 6 7]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"len=%d, cap=%d\n"</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s[] <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++&#123;</span><br><span class="line">printSlice(s)</span><br><span class="line">s=<span class="built_in">append</span>(s,<span class="number">2</span>*i+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s)</span><br><span class="line">s1:=[]<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;</span><br><span class="line">printSlice(s1)</span><br><span class="line">s2:=<span class="built_in">make</span>([]<span class="keyword">int</span> ,<span class="number">16</span>)</span><br><span class="line">s3:=<span class="built_in">make</span>([]<span class="keyword">int</span> ,<span class="number">10</span> ,<span class="number">32</span>)</span><br><span class="line">printSlice(s2)</span><br><span class="line">printSlice(s3)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Copying slice"</span>) </span><br><span class="line"><span class="built_in">copy</span>(s2,s1)</span><br><span class="line">printSlice(s2)</span><br><span class="line">fmt.Println(<span class="string">"Deleting slements from slice"</span>)</span><br><span class="line">s2=<span class="built_in">append</span>(s2[:<span class="number">3</span>],s2[<span class="number">4</span>:]...)</span><br><span class="line">printSlice(s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a class="markdownIt-Anchor" href="#map"></a> Map</h3><p>创建 make(map[string]int)</p><p>key不存在时，获取value类型的初始值</p><p><code>value,ok:=m[key]</code>来判断是否存在key</p><p>delete删除一个key</p><p>range遍历</p><p>len获取元素个数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="comment">//hash map 无序</span></span><br><span class="line"><span class="string">"name"</span>:<span class="string">"ccmouse"</span>,</span><br><span class="line"><span class="string">"course"</span>:<span class="string">"golang"</span>,</span><br><span class="line"><span class="string">"site"</span>:<span class="string">"imooc"</span>,</span><br><span class="line"><span class="string">"quality"</span>:<span class="string">"notbad"</span>,</span><br><span class="line">&#125;</span><br><span class="line">m2:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)<span class="comment">//m2==empty map</span></span><br><span class="line"><span class="keyword">var</span> m3 <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span><span class="comment">//m3==nil</span></span><br><span class="line">fmt.Println(m,m2,m3)</span><br><span class="line"><span class="keyword">for</span> k,v:=<span class="keyword">range</span> m&#123;</span><br><span class="line">fmt.Println(k,v)</span><br><span class="line">&#125;</span><br><span class="line">    fmt.Println(<span class="string">"Getting values"</span>)</span><br><span class="line">courseName,ok:=m[<span class="string">"course"</span>]</span><br><span class="line">fmt.Println(courseName,ok)</span><br><span class="line"><span class="keyword">if</span> causeName,ok:=m[<span class="string">"cause"</span>];ok&#123;</span><br><span class="line">fmt.Println(causeName)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Key dosen't exist"</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Deleting values"</span>)</span><br><span class="line">name,ok:=m[<span class="string">"name"</span>]</span><br><span class="line">fmt.Println(name,ok)</span><br><span class="line"><span class="built_in">delete</span>(m,<span class="string">"name"</span>)</span><br><span class="line">name,ok=m[<span class="string">"name"</span>]</span><br><span class="line">fmt.Println(name,ok)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">map[course:golang name:ccmouse quality:notbad site:imooc] map[] map[]</span></span><br><span class="line"><span class="comment">site imooc</span></span><br><span class="line"><span class="comment">quality notbad</span></span><br><span class="line"><span class="comment">name ccmouse</span></span><br><span class="line"><span class="comment">course golang</span></span><br><span class="line"><span class="comment">Getting values</span></span><br><span class="line"><span class="comment">golang true</span></span><br><span class="line"><span class="comment">Key dosen't exist</span></span><br><span class="line"><span class="comment">Deleting values</span></span><br><span class="line"><span class="comment">ccmouse true</span></span><br><span class="line"><span class="comment"> false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;go语言特点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#go语言特点&quot;&gt;&lt;/a&gt; Go语言特点&lt;/h3&gt;
&lt;p&gt;没有对象，没有继承多态，没有泛型，没有try/catch&lt;/p&gt;
&lt;p&gt;有接口，函数是变成，csp并发模型&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="Go" scheme="https://ghostlo.github.io/categories/Go/"/>
    
    
      <category term="go" scheme="https://ghostlo.github.io/tags/go/"/>
    
      <category term="语言学习" scheme="https://ghostlo.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>go学习（一）</title>
    <link href="https://ghostlo.github.io/2019/04/21/Go%E5%AD%A6%E4%B9%A01/"/>
    <id>https://ghostlo.github.io/2019/04/21/Go学习1/</id>
    <published>2019-04-21T08:36:07.000Z</published>
    <updated>2019-04-22T14:01:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><h3 id="下载安装包"><a class="markdownIt-Anchor" href="#下载安装包"></a> 下载安装包</h3><p>地址： <a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a></p><p>安装包的位置一般是默认在usr/local/go</p><h3 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h3><p>1、打开终端输入cd ~进入用户主目录;</p><p>2、输入ls -all命令查看是否存在.bash_profile;</p><p>3、存在既使用vim .bash_profile 打开文件;</p><p>4、输入 i 进入vim编辑模式；</p><p>5、输入下面代码， 其中 GOPATH: 日常开发的根目录。GOBIN:是GOPATH下的bin目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=/Users/longxiansheng/go</span><br><span class="line"></span><br><span class="line">export GOBIN=$GOPATH/bin</span><br><span class="line"></span><br><span class="line">PATH=\$PATH:\$GOBIN</span><br></pre></td></tr></table></figure><p>这里列举几个最为重要的环境变量：</p><ul><li><strong>$GOROOT</strong> 表示 Go 在你的电脑上的安装位置，它的值一般都是 $HOME/go，当然，你也可以安装在别的地方。</li><li><strong>$GOARCH</strong> 表示目标机器的处理器架构，它的值可以是 386、amd64 或 arm。</li><li><strong>$GOOS</strong> 表示目标机器的操作系统，它的值可以是 darwin、freebsd、linux 或 windows。</li><li><strong>$GOBIN</strong> 表示编译器和链接器的安装位置，默认是 $GOROOT/bin，如果你使用的是 Go 1.0.3 及以后的版本，一般情况下你可以将它的值设置为空，Go 将会使用前面提到的默认值。</li></ul><p>为了区分本地机器和目标机器，你可以使用 GOHOSTOS 和 GOHOSTARCH 设置本地机器的操作系统名称和编译体系结构，这两个变量只有在进行交叉编译的时候才会用到，如果你不进行显示设置，他们的值会和本地机器（GOOS 和 GOARCH）一样。</p><ul><li><strong>$GOPATH</strong> 默认采用和 $GOROOT 一样的值，但从 Go 1.1 版本开始，你必须修改为其它路径。它可以包含多个 Go 语言源码文件、包文件和可执行文件的路径，而这些路径下又必须分别包含三个规定的目录：src、pkg 和 bin，这三个目录分别用于存放源码文件、包文件和可执行文件。</li><li><strong>$GOARM</strong> 专门针对基于 arm 架构的处理器，它的值可以是 5 或 6，默认为 6。</li><li><strong>$GOMAXPROCS</strong> 用于设置应用程序可使用的处理器个数与核数，详见第 14.1.3 节。</li></ul><h3 id="安装intellij-golang"><a class="markdownIt-Anchor" href="#安装intellij-golang"></a> 安装Intellij golang</h3><p>设置SDK路径为usr/local/go</p><p><strong>go run/ go install/ go build / go get的区别</strong></p><ul><li>go run 运行当个.go文件</li><li>go install 在编译源代码之后还安装到指定的目录</li><li>go build 加上可编译的go源文件可以得到一个可执行文件</li><li>go get = git clone + go install 从指定源上面下载或者更新指定的代码和依赖，并对他们进行编译和安装</li></ul><h2 id="调试"><a class="markdownIt-Anchor" href="#调试"></a> 调试</h2><p>如果你不想使用调试器，你可以按照下面的一些有用的方法来达到基本调试的目的：</p><ol><li>在合适的位置使用打印语句输出相关变量的值（<code>print</code>/<code>println</code> 和 <code>fmt.Print</code>/<code>fmt.Println</code>/<code>fmt.Printf</code>）。</li><li>在 <code>fmt.Printf</code> 中使用下面的说明符来打印有关变量的相关信息：<ul><li><code>%+v</code> 打印包括字段在内的实例的完整信息</li><li><code>%#v</code> 打印包括字段和限定类型名称在内的实例的完整信息</li><li><code>%T</code> 打印某个类型的完整说明</li></ul></li><li>使用 panic 语句（第 13.2 节）来获取栈跟踪信息（直到 panic 时所有被调用函数的列表）。</li><li>使用关键字 defer 来跟踪代码执行过程（第 6.4 节）。</li></ol><h2 id="编写程序"><a class="markdownIt-Anchor" href="#编写程序"></a> 编写程序</h2><h3 id="特性"><a class="markdownIt-Anchor" href="#特性"></a> 特性</h3><p><a href="http://en.wikipedia.org/wiki/LALR_parser" target="_blank" rel="noopener">LALR</a> 是 Go 语言的语法标准，你也可以在 <a href="https://github.com/golang/go/blob/master/src%2Fcmd%2Finternal%2Fgc%2Fgo.y" target="_blank" rel="noopener"><code>src/cmd/internal/gc/go.y</code></a> 中查看到，这种语法标准在编译时不需要符号表来协助解析。</p><p>许多能够在大多数面向对象语言中使用的特性 Go 语言都没有支持，但其中的一部分可能会在未来被支持。</p><ul><li>为了简化设计，不支持函数重载和操作符重载</li><li>为了避免在 C/C++ 开发中的一些 Bug 和混乱，不支持隐式转换</li><li>Go 语言通过另一种途径实现面向对象设计（第 10-11 章）来放弃类和类型的继承</li><li>尽管在接口的使用方面（第 11 章）可以实现类似变体类型的功能，但本身不支持变体类型</li><li>不支持动态加载代码</li><li>不支持动态链接库</li><li>不支持泛型</li><li>通过 <code>recover</code> 和 <code>panic</code> 来替代异常机制（第 13.2-3 节）</li><li>不支持静态变量</li></ul><p>关于 Go 语言开发团队对于这些方面的讨论，你可以通过 <a href="http://golang.org/doc/go_faq.html" target="_blank" rel="noopener">Go 常见问题</a> 页面查看。</p><h3 id="格式化"><a class="markdownIt-Anchor" href="#格式化"></a> 格式化</h3><p>Go 开发团队不想要 Go 语言像许多其它语言那样总是在为代码风格而引发无休止的争论，浪费大量宝贵的开发时间，因此他们制作了一个工具：<code>go fmt</code>（<code>gofmt</code>）。这个工具可以将你的源代码格式化成符合官方统一标准的风格，属于语法风格层面上的小型重构。遵循统一的代码风格是 Go 开发中无可撼动的铁律，因此你必须在编译或提交版本管理系统之前使用 <code>gofmt</code> 来格式化你的代码。</p><p>在格式化输出时，你可以使用 <code>%t</code> 来表示你要输出的值为布尔型。</p><p>在格式化字符串里，<code>%d</code> 用于格式化整数（<code>%x</code> 和 <code>%X</code> 用于格式化 16 进制表示的数字），<code>%g</code> 用于格式化浮点型（<code>%f</code> 输出浮点数，<code>%e</code> 输出科学计数表示法），<code>%0d</code> 用于规定输出定长的整数，其中开头的数字 0 是必须的。</p><p><code>%n.mg</code> 用于表示数字 n 并精确到小数点后 m 位，除了使用 g 之外，还可以使用 e 或者 f</p><p>[格式化代码-gitbook][<a href="https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/03.5.md" target="_blank" rel="noopener">https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/03.5.md</a>]</p><p>[与c,c++交互][<a href="https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/03.9.md" target="_blank" rel="noopener">https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/03.9.md</a>]</p><p>下面列举了 Go 代码中会使用到的 25 个关键字或保留字：</p><table><thead><tr><th>break</th><th>default</th><th>func</th><th>interface</th><th>select</th></tr></thead><tbody><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></tbody></table><p>Go 语言还有 36 个预定义标识符</p><table><thead><tr><th>append</th><th>bool</th><th>byte</th><th>cap</th><th>close</th><th>complex</th><th>complex64</th><th>complex128</th><th>uint16</th></tr></thead><tbody><tr><td>copy</td><td>false</td><td>float32</td><td>float64</td><td>imag</td><td>int</td><td>int8</td><td>int16</td><td>uint32</td></tr><tr><td>int32</td><td>int64</td><td>iota</td><td>len</td><td>make</td><td>new</td><td>nil</td><td>panic</td><td>uint64</td></tr><tr><td>print</td><td>println</td><td>real</td><td>recover</td><td>string</td><td>true</td><td>uint</td><td>uint8</td><td>uintptr</td></tr></tbody></table><h3 id="可见性规则"><a class="markdownIt-Anchor" href="#可见性规则"></a> <strong>可见性规则</strong></h3><p>当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）。</p><p>你可以通过使用包的别名来解决包名之间的名称冲突</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fm <span class="string">"fmt"</span> <span class="comment">// alias3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fm.Println(<span class="string">"hello, world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个变量被声明之后(var)，系统自动赋予它该类型的零值：int 为 0，float 为 0.0，bool 为 false，string 为空字符串，指针为 nil。记住，所有的内存在 Go 中都是经过初始化的。</p><p>变量的命名规则遵循骆驼命名法，即首个单词小写，每个新单词的首字母大写，例如：numShips 和 startDate。</p><p>首字母大写表示全局的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println（<span class="string">"hello, world"</span>）</span><br><span class="line"><span class="comment">//以下函数只可以用于调试阶段，在部署程序的时候务必将它们替换成 fmt 中的相关函数。</span></span><br><span class="line"><span class="built_in">print</span></span><br><span class="line"><span class="built_in">println</span>：<span class="built_in">print</span>(<span class="string">"ABC"</span>)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"ABC"</span>)</span><br><span class="line"><span class="built_in">println</span>(i)</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h3><p>在必要以及可行的情况下，一个类型的值可以被转换成另一种类型的值。由于 Go 语言不存在隐式类型转换，因此所有的转换都必须显式说明，就像调用一个函数一样（类型在这里的作用可以看作是一种函数）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valueOfTypeB = typeB(valueOfTypeA)</span><br></pre></td></tr></table></figure><p>存储在常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p><p>常量的定义格式：<code>const identifier [type] = value</code>，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Pi = <span class="number">3.14159</span></span><br></pre></td></tr></table></figure><p>在 Go 语言中，你可以省略类型说明符 <code>[type]</code>，因为编译器可以根据变量的值来推断其类型。</p><ul><li>显式类型定义： <code>const b string = &quot;abc&quot;</code></li><li>隐式类型定义： <code>const b = &quot;abc&quot;</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n <span class="keyword">int</span></span><br><span class="line">f(n + <span class="number">5</span>) <span class="comment">// 无类型的数字型常量 “5” 它的类型在这里变成了 int</span></span><br></pre></td></tr></table></figure><p>常量的值必须是能够在编译时就能够确定的；你可以在其赋值表达式中涉及计算过程，但是所有用于计算的值必须在编译期间就能获得。</p><ul><li>正确的做法：<code>const c1 = 2/3</code></li><li>错误的做法：<code>const c2 = getNumber()</code> // 引发构建错误: <code>getNumber() used as value</code></li></ul><p><strong>因为在编译期间自定义函数均属于未知，因此无法用于常量的赋值，但内置函数可以使用，如：len()。</strong></p><p>数字型的常量是没有大小和符号的，并且可以使用任何精度而不会导致溢出</p><p>声明变量的一般形式是使用 <code>var</code> 关键字：<code>var identifier type</code>。</p><p>Go 编译器的智商已经高到可以根据变量的值来自动推断其类型，这有点像 Ruby 和 Python 这类动态语言，只不过它们是在运行时进行推断，而 Go 是在编译时就已经完成推断过程。因此，你还可以使用下面的这些形式来声明及初始化变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">15</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"Go says hello to the world!"</span></span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">a = <span class="number">15</span></span><br><span class="line">b = <span class="literal">false</span></span><br><span class="line">str = <span class="string">"Go says hello to the world!"</span></span><br><span class="line">numShips = <span class="number">50</span></span><br><span class="line">city <span class="keyword">string</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>你可以通过 &amp;i 来获取变量 i 的内存地址（第 4.9 节），例如：0xf840000040（每次的地址都可能不一样）。值类型的变量的值存储在栈中。</p><p>在 Go 语言中，指针（第 4.9 节）属于引用类型，其它的引用类型还包括 slices（第 7 章），maps（第 8 章）和 channel（第 13 章）。被引用的变量会存储在堆中，以便进行垃圾回收，且比栈拥有更大的内存空间。</p><p>变量的类型也可以在运行时实现自动推断，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">HOME = os.Getenv(<span class="string">"HOME"</span>)</span><br><span class="line">USER = os.Getenv(<span class="string">"USER"</span>)</span><br><span class="line">GOROOT = os.Getenv(<span class="string">"GOROOT"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这种写法主要用于声明 <strong>包级别</strong> 的全局变量，当你在函数体内声明 <strong>局部变量</strong> 时，应使用简短声明语法 <code>:=</code>(即只能在函数体内用)，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="打印"><a class="markdownIt-Anchor" href="#打印"></a> 打印</h3><p>函数 <code>Printf</code> 可以在 fmt 包外部使用，这是因为它以大写字母 P 开头，该函数主要用于打印输出到控制台。通常使用的格式化字符串作为第一个参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Printf</span><span class="params">(format <span class="keyword">string</span>, list of variables to be printed)</span></span></span><br></pre></td></tr></table></figure><p>这个格式化字符串可以含有一个或多个的格式化标识符，例如：<code>%..</code>，其中 <code>..</code> 可以被不同类型所对应的标识符替换，如 <code>%s</code> 代表字符串标识符、<code>%v</code> 代表使用类型的默认输出格式的标识符。这些标识符所对应的值从格式化字符串后的第一个逗号开始按照相同顺序添加，如果参数超过 1 个则同样需要使用逗号分隔。使用这些占位符可以很好地控制格式化输出的文本。</p><p>函数 <code>fmt.Print</code> 和 <code>fmt.Println</code> 会自动使用格式化标识符 <code>%v</code> 对字符串进行格式化，两者都会在每个参数之间自动增加空格，而后者还会在字符串的最后加上一个换行符。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Print(<span class="string">"Hello:"</span>, <span class="number">23</span>)</span><br></pre></td></tr></table></figure><p>将输出：<code>Hello: 23</code>。</p><p>如果你声明了一个局部变量却没有在相同的代码块中使用它，同样会得到编译错误，例如下面这个例子当中的变量 a：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">"abc"</span></span><br><span class="line">   fmt.Println(<span class="string">"hello, world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试编译这段代码将得到错误 <code>a declared and not used</code>。</p><p>此外，单纯地给 a 赋值也是不够的，这个值必须被使用，所以使用 <code>fmt.Println(&quot;hello, world&quot;, a)</code> 会移除错误。</p><p>同一类型的多个变量可以声明在同一行，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>(这是将类型写在标识符后面的一个重要原因)</p><p>多变量可以在同一行进行赋值，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">5</span>, <span class="number">7</span>, <span class="string">"abc"</span></span><br></pre></td></tr></table></figure><p>上面这行假设了变量 a，b 和 c 都已经被声明，否则的话应该这样使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c := <span class="number">5</span>, <span class="number">7</span>, <span class="string">"abc"</span></span><br></pre></td></tr></table></figure><p>右边的这些值以相同的顺序赋值给左边的变量，所以 a 的值是 <code>5</code>， b 的值是 <code>7</code>，c 的值是 <code>&quot;abc&quot;</code>。</p><p>这被称为 <strong>并行</strong> 或 <strong>同时</strong> 赋值。</p><p>如果你想要交换两个变量的值，则可以简单地使用 <code>a, b = b, a</code>。</p><p>(在 Go 语言中，这样省去了使用交换函数的必要)</p><p>空白标识符 <code>_</code> 也被用于抛弃值，如值 <code>5</code> 在：<code>_, b = 5, 7</code> 中被抛弃。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装&quot;&gt;&lt;/a&gt; 安装&lt;/h2&gt;
&lt;h3 id=&quot;下载安装包&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#下载安装包&quot;&gt;&lt;/a&gt; 下载安装包&lt;/h3&gt;
&lt;
      
    
    </summary>
    
      <category term="Go" scheme="https://ghostlo.github.io/categories/Go/"/>
    
    
      <category term="go" scheme="https://ghostlo.github.io/tags/go/"/>
    
      <category term="语言学习" scheme="https://ghostlo.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>C++学习</title>
    <link href="https://ghostlo.github.io/2019/04/15/C-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://ghostlo.github.io/2019/04/15/C-学习/</id>
    <published>2019-04-15T14:38:01.000Z</published>
    <updated>2019-04-21T09:08:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载至：</p><p><a href="https://gitbook.cn/gitchat/author/58d08ba33f325e9a6cfa7ec6" target="_blank" rel="noopener">天千</a></p><p>CSDN专家博主，西安邮电大学硕士研究生，BAT某厂C<ins>研发工程师，热爱Linux内核、C</ins>、喜欢写博客。</p><p>如何学好 Linux、C++，并搞定 BAT <a href="http://xn--gitbook-666um47e.cn" target="_blank" rel="noopener">面试gitbook.cn</a><img src="https://pic3.zhimg.com/v2-b0697edc9d27b5744269de2dfb1b77e2_ipico.jpg" alt="图标"></p><p>C++从小白到入门</p><p>C++我是从研究生入学前的二个月开始学习，基本算是零基础吧，就大学那会学了一些C的知识，经常写一个程序一堆&quot;烫烫烫&quot;，真的是到了本科毕业还没搞懂C语言。然后在这个二个月我开窍了，突然发现对C语言融汇贯通了， 而这一切要归功于《C和指针》这本书，总结一下，我认为C语言要学好必须理解三个概念。</p><ul><li>什么是指针?，指针和数组的关系。</li><li>程序分为哪几个段，能说清楚全局变量，局部变量，静态变量等分别属于哪个段，各个段的特点是什么?</li><li>C语言的编译和链的接过程</li></ul><p>真心不推荐在Windows上来学习C语言，因为它屏蔽了太多的细节，而这些细节却又是C程序员不可或缺的一部分。C语言这个阶段过去后，我开始学习Linux C系统编程这个部分，最开始接触的一本书就是《Unix/Linux编程实践教程》强力推荐给大家，这本书会给你介绍如何通过man手册来帮助编程，如何去实现who、cat、ls、ps等系统命令。通过这本书的学习会让你对Linux上很多的原理有一个深刻的认识。</p><p>这本书学完后我就开始看UNP和APUE，其中APUE我并不推荐给大家，我推荐给大家的是《Linux/UNIX系统编程手册》这本书的内容更全面，更新。建议大家在看这些书的时候可以做详细的笔记和代码练习，在我的博客上就有我总结的文章。系统编程ok后，就要重点看UNP了，看这本书的时候要找重点看，里面有的章节已经过时了，还有一些章节对于我们目前来说用途并不大，比如STCP的部分。对于这本书重点有三个部分。</p><ul><li>各个socket API的对应到OS，做了哪些事情，比如connect后，做了哪些事情?，accept呢?，什么是RST报文?，什么是SIGPIPE，如何触发的?</li><li>网络IO模型，同步和异步，阻塞和非阻塞的概念，Linux上各种网络IO模型的优缺点对比，epoll、select、信号驱动IO等</li><li>服务器的网络编程模型，多线程、多进程、线程池等，各自优缺点</li></ul><p>在我的博客上也有一篇文章介绍了相关的内容，学完这个后，剩下的就靠多实践和多读一些开源的项目来积累自己的经验了，这里推荐cjson、webbench、Tinyhttpd等，代码量都不大，很容易读懂，在读懂的基础上可以进行适当的改造和重写。</p><p>C语言和Linux系统编程这个部分结束后，就要开始踏入C<ins>的世界了，自从C</ins>11出来后，我觉得C<ins>易学了，但是苦于现存的老的C</ins>代码还是有很多，所以我们不得不去学习C<ins>98相关的知识，这里我推荐《C</ins> primer》一书，注意是C++ primer，不是《C++ primer plus》我看书的方法都比较老套，第一遍力求看懂，第二遍开始抄代码，练习，第三遍开始总结写博客。所以这本书我前前后后看了大半年， 后面又看了C<ins>编程思想上册，Effective C</ins>、深度理解C<ins>对象模型、Exceptional C</ins>、深入理解C<ins>11等经典书籍，看书的模式基本上都是二到三遍，通过抄书上的代码和写博客来加深记忆。看完这些书说真的，我觉得我的C</ins>还只是一个小白，我真正蜕变要从读《Linux C<ins>服务端编程》陈硕的这本书开始，通过这本书我觉得我的C</ins>水平有了一个质的飞跃。我理解C++有以下几个要点(只是部分):</p><ul><li>RAII，这个很重要，是C<ins>的核心，很多学习了C</ins>的人都不知道RAII</li><li>值语义和对象语义，这个决定了你如何写好一个C++类</li><li>对象的生命周期，类的生命周期要清晰</li><li>智能指针，现代C++编程几乎不太可能出现delete语句，内存泄漏的问题真的很少会出现</li><li>各种STL和C<ins>的一些坑，比如迭代器遍历过程中如何删除元素、std::list的size接口的复杂度居然是O(N)（C</ins>11已经修正）等等</li><li>善用std::bind和std::function</li><li>基于对象编程和面向对象编程的区别</li><li>移动语义很重要</li><li>Lambda的捕获表达式</li><li>搞清楚C++的三五法则</li><li>std::string的实现方式，是否是线程安全的</li><li>std::map和std::set的底层数据结构等</li></ul><p>到了这个阶段后我就开始找工作了，上面的全部过程花费了研究生二年的时间，后来找到了某BAT实习的工作后，我就一边实习，一边读《Effective Modern C++》，这本书我重点推荐给大家，在我的博客上也有全部的总结，这本书讲了很多C++11种的一些实现细节、坑以及建议。最后推荐一些linux内核相关的书籍和学习方法</p><ul><li>《深入理解Linux内核架构》</li><li>《Linux环境编程 从应用到内核》</li><li><a href="https://link.zhihu.com/?target=http%3A//lwn.net" target="_blank" rel="noopener">http://lwn.net</a></li><li>重点找自己感兴趣的模块来看，比如我就对文件系统</li><li>通过内核模块来探索，不能只看代码不练习</li></ul><p>网络上有很多从头开始编写一个内存文件系统的文章，在我的博客上也有一个系列讲解Linux内核模块编程入门的文章，通过编写Linux内核模块可以做很多有趣的事情，比如系统调用拦截、网络拦截、做安全审计等等，通过编写内核模块可以提高对Linux内核学习的兴趣。</p><h2 id="bat求职之路"><a class="markdownIt-Anchor" href="#bat求职之路"></a> BAT求职之路</h2><p>研究生阶段我主要面试了阿里巴巴、腾讯、网易都是C<ins>研发工程师，只有网易拿到的是实习的Offer，其他的都是拿到了实习和正式的Offer，就C</ins>这个岗位来说，阿里巴巴的要求明显高于腾讯和网易，网易的C<ins>面试相对容易一些，问的很基础，感觉就是走个过场，都没问什么太难的问题，可能是因为是招实习吧，腾讯的C</ins>面试偏基础从OS、网络、编译原理、算法等。问题都不太难，问的比较广，阿里巴巴更侧重知识面、底层原理、解决问题的能力等。我阿里巴巴一共面了五面，问了很多C++、算法、Linux内核等知识，在整个求职过程中，我做了以下几件事:</p><ul><li>刷leetcode的题目</li><li>从牛客网和google上搜集面试题，分门别类的进行整理，每天都回顾一下</li><li>拓宽自己的知识面，学习一些新的知识，比如当时流行的docker，更侧重学习其原理</li><li>加深自己对一些底层的OS知识的理解，比如epoll的原理、docker的cgroup机制和namespace机制的实现、文件系统VFS的实现、Linux信号、管道等的实现。</li></ul><p>整理面试题和学习一些底层的OS知识对我整个面试过程中帮助很大，正常情况下如果你只学习Java或者C<ins>是很难拿到阿里巴巴的Offer，阿里巴巴对应届生的知识面、知识的理解程度要求还是比较高的，在我的整个C</ins>面试过程中，问的最多的就是IO复用、智能指针、内存泄漏的问题如何解决、如何排查Load高的问题、Linux内核相关的知识等，而这些问题对我来说早已得心应手，在搜集面试题的时候很多问题都是反复被提及到的，我只需要好好总结即可。</p><p>另外一点就是大家在准备面试题的时候不能只记一个结论，多问问为什么，举个例子，TCP/IP的三次握手和四次挥手的过程是什么样的，我们不光光要知道这个问题的结论，还要知道为什么是三次握手，四次挥手，为什么不是二次？当被问及到epoll、select的区别时，你应该从使用方法、可移植性、性能、优缺点、内核实现等多个方面分析和总结。而不是简简单单的就提及一个优缺点就完事了。 你擅长的地方你应该多多引导你的面试官去问。</p><h2 id="工作心得"><a class="markdownIt-Anchor" href="#工作心得"></a> 工作心得</h2><p>在公司实习了大约1年，今年七月份正式入职，在这整个过程中我也零散的做了很多小需求，对C++的理解更加深刻，尤其是对软件工程有了一个新的理解，在此我想分享给大家。</p><ul><li>要有造轮子的能力，但是不要轻易的去造轮子</li><li>单元测试的重要性，通过单元测试也可以提高程序员的信心，为了更好的写单测，会逼迫我们将模块之间的耦合降到最低，这样可以方便单测。</li><li>写易读的、可维护的代码</li><li>Google的C++编程规范，每一条都值得细细品味</li><li>Chromium开源项目有很多值得我们借鉴的地方</li><li>画UML图是程序员的基本素质，要有好的设计，设计要做评审</li><li>CodeReview一定要有的</li><li>类名和变量名的易读性</li></ul><p>可能对于很多人来说编码规范、CodeReview、UML、单测好像都是说说而已，我起初也是这么认为，感触并不是很深刻，直到我的同事开始带我的时候，我自己亲身去体验的时候才发现这其中奥妙无穷， 我们团队使用Chromium的base库作为自己的基础库，编码规范、全都follow Chromium，至于为什么不用boost，我的理由则是，boost是一个我无法驾驭的怪兽，而chromium的base库是我可以驾驭的，可以打组合拳，代码的稳定性已经经过上亿人的考验，值得我们信赖。推荐大家看看chromium的base库，源代码很易读。通过阅读它的代码可以学习到很多知识。推荐一本书给大家《C++ API设计》，讲解了很多软件工程、设计层面的知识。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>上面说了很多，更侧重分享了我的学习经历，和一些感悟，可能我说的比较简单，实际上理解上面这些东西，是存在一个过程的，是一个从量变到质变的过程，在整个过程中我理解到，学习要坚持，不是一蹴而就的，要经历量变到质变的过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载至：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitbook.cn/gitchat/author/58d08ba33f325e9a6cfa7ec6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;天千&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CSDN专家博主，西安
      
    
    </summary>
    
      <category term="C++" scheme="https://ghostlo.github.io/categories/C/"/>
    
    
      <category term="语言学习" scheme="https://ghostlo.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="c++" scheme="https://ghostlo.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>lfu and lru</title>
    <link href="https://ghostlo.github.io/2019/04/14/suanfa-1/"/>
    <id>https://ghostlo.github.io/2019/04/14/suanfa-1/</id>
    <published>2019-04-14T14:26:27.000Z</published>
    <updated>2019-04-14T14:38:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode 146</p><p>Design and implement a data structure for <a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU" target="_blank" rel="noopener">Least Recently Used (LRU) cache</a>. It should support the following operations: <code>get</code> and <code>put</code>.</p><p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br><code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p><p><strong>Follow up:</strong><br>Could you do both operations in <strong>O(1)</strong> time complexity?</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LRUCache cache = new LRUCache( 2 /* capacity */ );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       // returns 1</span><br><span class="line">cache.put(3, 3);    // evicts key 2</span><br><span class="line">cache.get(2);       // returns -1 (not found)</span><br><span class="line">cache.put(4, 4);    // evicts key 1</span><br><span class="line">cache.get(1);       // returns -1 (not found)</span><br><span class="line">cache.get(3);       // returns 3</span><br><span class="line">cache.get(4);       // returns 4</span><br></pre></td></tr></table></figure><p>这道题让我们实现一个LRU缓存器，LRU是Least Recently Used的简写，就是最近最少使用的意思。那么这个缓存器主要有两个成员函数，get和put，其中get函数是通过输入key来获得value，如果成功获得后，这对(key, value)升至缓存器中最常用的位置（顶部），如果key不存在，则返回-1。而put函数是插入一对新的(key, value)，如果原缓存器中有该key，则需要先删除掉原有的，将新的插入到缓存器的顶部。如果不存在，则直接插入到顶部。若加入新的值后缓存器超过了容量，则需要删掉一个最不常用的值，也就是底部的值。具体实现时我们需要三个私有变量，cap, l和m，其中cap是缓存器的容量大小，l是保存缓存器内容的列表，m是HashMap，保存关键值key和缓存器各项的迭代器之间映射，方便我们以O(1)的时间内找到目标项。</p><p>然后我们再来看get和put如何实现，get相对简单些，我们在HashMap中查找给定的key，若不存在直接返回-1。如果存在则将此项移到顶部，这里我们使用C++ STL中的函数splice，专门移动链表中的一个或若干个结点到某个特定的位置，这里我们就只移动key对应的迭代器到列表的开头，然后返回value。这里再解释一下为啥HashMap不用更新，因为HashMap的建立的是关键值key和缓存列表中的迭代器之间的映射，get函数是查询函数，如果关键值key不在HashMap，那么不需要更新。如果在，我们需要更新的是该key-value键值对儿对在缓存列表中的位置，而HashMap中还是这个key跟键值对儿的迭代器之间的映射，并不需要更新什么。</p><p>对于put，我们也是现在HashMap中查找给定的key，如果存在就删掉原有项，并在顶部插入新来项，然后判断是否溢出，若溢出则删掉底部项(最不常用项)。</p><p>技巧，用map保存iteration指针来删除数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LRUCache(<span class="keyword">int</span> capacity)</span><br><span class="line">    &#123;</span><br><span class="line">        maxSize = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index.find(key) == index.end()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> value=index[key]-&gt;second;</span><br><span class="line">        data.erase(index[key]);</span><br><span class="line">        data.push_front(make_pair(key,value));</span><br><span class="line">        index[key]=data.begin();</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index.find(key) != index.end())</span><br><span class="line">        &#123;</span><br><span class="line">            data.erase(index[key]);</span><br><span class="line">            data.push_front(make_pair(key,value));</span><br><span class="line">            index[key]=data.begin();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.size() == maxSize)</span><br><span class="line">            &#123;</span><br><span class="line">                index.erase(data.back().first);</span><br><span class="line">                data.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">            data.push_front(make_pair(key,value));</span><br><span class="line">            index[key] = data.begin();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; data;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;::iterator&gt; index;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> _ = []() &#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> <span class="title">final</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; keys;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator&gt;&gt; values;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LRUCache(<span class="keyword">const</span> <span class="keyword">int</span> capacity) <span class="keyword">noexcept</span> : capacity(capacity) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> key)</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> it = values.find(key);</span><br><span class="line">        <span class="keyword">if</span> (it == values.end()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (it-&gt;second.second != keys.begin())</span><br><span class="line">            keys.splice(keys.begin(), keys, it-&gt;second.second);</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second.first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> key, <span class="keyword">const</span> <span class="keyword">int</span> value)</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!capacity) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> it = values.find(key);</span><br><span class="line">        <span class="keyword">if</span> (it != values.end()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;second.second != keys.begin())</span><br><span class="line">                keys.splice(keys.begin(), keys, it-&gt;second.second);</span><br><span class="line">            it-&gt;second.first = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (keys.size() == capacity) &#123;</span><br><span class="line">            values.erase(keys.back());</span><br><span class="line">            <span class="keyword">if</span> (capacity &gt; <span class="number">1</span>) keys.splice(keys.begin(), keys, prev(keys.end()));</span><br><span class="line">            keys.front() = key;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> keys.push_front(key);</span><br><span class="line">        values[key] = &#123;value, keys.begin()&#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>leetcode 460</p><p>Design and implement a data structure for <a href="https://en.wikipedia.org/wiki/Least_frequently_used" target="_blank" rel="noopener">Least Frequently Used (LFU)</a> cache. It should support the following operations: <code>get</code> and <code>put</code>.</p><p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br><code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item. For the purpose of this problem, when there is a tie (i.e., two or more keys that have the same frequency), the least <strong>recently</strong> used key would be evicted.</p><p><strong>Follow up:</strong><br>Could you do both operations in <strong>O(1)</strong> time complexity?</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LFUCache cache = new LFUCache( 2 /* capacity */ );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       // returns 1</span><br><span class="line">cache.put(3, 3);    // evicts key 2</span><br><span class="line">cache.get(2);       // returns -1 (not found)</span><br><span class="line">cache.get(3);       // returns 3.</span><br><span class="line">cache.put(4, 4);    // evicts key 1.</span><br><span class="line">cache.get(1);       // returns -1 (not found)</span><br><span class="line">cache.get(3);       // returns 3</span><br><span class="line">cache.get(4);       // returns 4</span><br></pre></td></tr></table></figure><p>由于需要删除最少次数的数字，那么我们必须要统计每一个key出现的次数，所以我们用一个哈希表m来记录当前数据{key, value}和其出现次数之间的映射，这样还不够，为了方便操作，我们需要把相同频率的key都放到一个list中，那么需要另一个哈希表freq来建立频率和一个里面所有key都是当前频率的list之间的映射。由于题目中要我们在O(1)的时间内完成操作了，为了快速的定位freq中key的位置，我们再用一个哈希表iter来建立key和freq中key的位置之间的映射。最后当然我们还需要两个变量cap和minFreq，分别来保存cache的大小，和当前最小的频率。</p><p>为了更好的讲解思路，我们还是用例子来说明吧，我们假设cache的大小为2，假设我们已经按顺序put进去5，4，那么来看一下内部的数据是怎么保存的，由于value的值并不是很重要，为了不影响key和frequence，我们采用value#来标记：</p><p>m:</p><p>5 -&gt; {value5, 1}</p><p>4 -&gt; {value4, 1}</p><p>freq:</p><p>1 -&gt; {5，4}</p><p>iter:</p><p>4 -&gt; list.begin() + 1</p><p>5 -&gt; list.begin()</p><p>这应该不是很难理解，m中5对应的频率为1，4对应的频率为1，然后freq中频率为1的有4和5。iter中是key所在freq中对应链表中的位置的iterator。然后我们的下一步操作是get(5)，下面是get需要做的步骤：</p><ol><li><p>如果m中不存在5，那么返回-1</p></li><li><p>从freq中频率为1的list中将5删除</p></li><li><p>将m中5对应的frequence值自增1</p></li><li><p>将5保存到freq中频率为2的list的末尾</p></li><li><p>在iter中保存5在freq中频率为2的list中的位置</p></li><li><p>如果freq中频率为minFreq的list为空，minFreq自增1</p></li><li><p>返回m中5对应的value值</p></li></ol><p>经过这些步骤后，我们再来看下此时内部数据的值：</p><p>m:</p><p>5 -&gt; {value5, 2}</p><p>4 -&gt; {value4, 1}</p><p>freq:</p><p>1 -&gt; {4}</p><p>2 -&gt; {5}</p><p>iter:</p><p>4 -&gt; list.begin()</p><p>5 -&gt; list.begin()</p><p>这应该不是很难理解，m中5对应的频率为2，4对应的频率为1，然后freq中频率为1的只有4，频率为2的只有5。iter中是key所在freq中对应链表中的位置的iterator。然后我们下一步操作是要put进去一个7，下面是put需要做的步骤：</p><ol><li><p>如果调用get(7)返回的结果不是-1，那么在将m中7对应的value更新为当前value，并返回</p></li><li><p>如果此时m的大小大于了cap，即超过了cache的容量，则：</p></li></ol><p>a）在m中移除minFreq对应的list的首元素的纪录，即移除4 -&gt; {value4, 1}</p><p>b）在iter中清除4对应的纪录，即移除4 -&gt; list.begin()</p><p>c）在freq中移除minFreq对应的list的首元素，即移除4</p><ol start="3"><li><p>在m中建立7的映射，即 7 -&gt; {value7, 1}</p></li><li><p>在freq中频率为1的list末尾加上7</p></li><li><p>在iter中保存7在freq中频率为1的list中的位置</p></li><li><p>minFreq重置为1</p></li></ol><p>经过这些步骤后，我们再来看下此时内部数据的值：</p><p>m:</p><p>5 -&gt; {value5, 2}</p><p>7 -&gt; {value7, 1}</p><p>freq:</p><p>1 -&gt; {7}</p><p>2 -&gt; {5}</p><p>iter:</p><p>7 -&gt; list.begin()</p><p>5 -&gt; list.begin()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> minFreq;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; m;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator&gt; indexMap;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&gt; freqMap;</span><br><span class="line"></span><br><span class="line">    LFUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;capacity = capacity;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m.find(key) != m.end())&#123;</span><br><span class="line">            freqMap[m[key].second].erase(indexMap[key]);</span><br><span class="line">            m[key].second++;</span><br><span class="line">            freqMap[m[key].second].push_back(key);</span><br><span class="line">            indexMap[key] = --freqMap[m[key].second].end();</span><br><span class="line">            <span class="keyword">if</span>(freqMap[minFreq].size() == <span class="number">0</span>)</span><br><span class="line">                minFreq++;</span><br><span class="line">            <span class="keyword">return</span> m[key].first;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(get(key) == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(size &gt;= capacity)&#123;</span><br><span class="line">                m.erase(freqMap[minFreq].front());</span><br><span class="line">                indexMap.erase(freqMap[minFreq].front());</span><br><span class="line">                freqMap[minFreq].pop_front();</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">            minFreq = <span class="number">1</span>;</span><br><span class="line">            m[key] = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&#123;value, <span class="number">1</span>&#125;;</span><br><span class="line">            freqMap[<span class="number">1</span>].push_back(key);</span><br><span class="line">            indexMap[key] = --freqMap[<span class="number">1</span>].end();</span><br><span class="line">            size++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            m[key].first = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x = []() &#123; </span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>); </span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">list</span>&lt;P&gt; L;</span><br><span class="line">    <span class="keyword">typedef</span> L::iterator I;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, L&gt; C2L;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, I&gt; K2I;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; K2C;</span><br><span class="line">    C2L countToEntryList;</span><br><span class="line">    K2I keyToIter;</span><br><span class="line">    K2C keyToCount;</span><br><span class="line">    <span class="keyword">int</span> maxSize, minCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/* time: O(1), space: O(1) auxiliary (i.e. does not count cache capacity itself) */</span></span><br><span class="line">    LFUCache(<span class="keyword">int</span> capacity) : maxSize(capacity) &#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* time: O(1), space: O(1) auxiliary (i.e. does not count cache capacity itself) */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!keyToIter.count(key))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> oldCount = keyToCount[key], newCount = oldCount + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">auto</span>&amp; oldEntryList = countToEntryList[oldCount];</span><br><span class="line">        <span class="keyword">auto</span>&amp; newEntryList = countToEntryList[newCount];</span><br><span class="line"></span><br><span class="line">        newEntryList.splice(newEntryList.begin(), oldEntryList, keyToIter[key]);</span><br><span class="line">        keyToIter[key] = newEntryList.begin(), keyToCount[key] = newCount;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (oldEntryList.empty()) &#123;</span><br><span class="line">            countToEntryList.erase(oldCount);</span><br><span class="line">            <span class="keyword">if</span> (minCount == oldCount)</span><br><span class="line">                minCount = newCount;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keyToIter[key]-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* time: O(1), space: O(1) auxiliary (i.e. does not count cache capacity itself) */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!maxSize)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (get(key) != <span class="number">-1</span>) &#123;</span><br><span class="line">            keyToIter[key]-&gt;second = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (keyToIter.size() == maxSize) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp; entryList = countToEntryList[minCount];</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> LRFKey = entryList.back().first;</span><br><span class="line">            keyToIter.erase(LRFKey), keyToCount.erase(LRFKey);</span><br><span class="line">            entryList.pop_back();</span><br><span class="line">            <span class="keyword">if</span> (entryList.empty())</span><br><span class="line">                countToEntryList.erase(minCount);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        minCount = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">auto</span>&amp; entryList = countToEntryList[minCount];</span><br><span class="line">        entryList.emplace_front(key, value);</span><br><span class="line">        keyToIter[key] = entryList.begin(), keyToCount[key] = minCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;leetcode 146&lt;/p&gt;
&lt;p&gt;Design and implement a data structure for &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU&quot; targ
      
    
    </summary>
    
      <category term="算法" scheme="https://ghostlo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="lru" scheme="https://ghostlo.github.io/tags/lru/"/>
    
      <category term="lfu" scheme="https://ghostlo.github.io/tags/lfu/"/>
    
  </entry>
  
  <entry>
    <title>字节跳动 面试</title>
    <link href="https://ghostlo.github.io/2019/04/14/suanfa/"/>
    <id>https://ghostlo.github.io/2019/04/14/suanfa/</id>
    <published>2019-04-14T14:00:17.000Z</published>
    <updated>2019-04-14T14:27:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="后端"><a class="markdownIt-Anchor" href="#后端"></a> 后端</h2><h3 id="1"><a class="markdownIt-Anchor" href="#1"></a> 1</h3><p>给一个数组，定义X为某个区间的最小值乘上这个区间内所有元素的和，求最大的X。如数组为3 1 6 4 5，则最大的X=4*（6+4+5）=60<br>三次握手，TCP连接的本质<br>同步IO和异步IO<br>进程和线程的区别，创建线程和进程的开销指什么<br>死锁及如何避免<br>什么是面向对象<br>C++多态和实现方法<br>设计题：设计一个购物车，给出应该有哪些数据表，每个表包含哪些字段<br>求数组的中位数。数组由一个升序数组翻转形成，如1 2 3 4 5 6 7可以从5处翻转，形成5 6 7 1 2 3 4，求5 6 7 1 2 3 4的中位数。要求时间复杂度低于O(n)。<br>InnoDB的索引类型<br>B树和B+树的区别<br>事务的四个隔离级别<br>拥塞控制及对应方法的使用场景<br>session和cookie的区别<br>设计题：设计一个任务定时器，给定时间和任务，到时间了自动执行对应的任务。<br>堆里面如何控制并发安全</p><p>死锁 内存溢出<br>设计线程安全类流程：<br>1、找出构成对象状态的所有变量。<br>2、找出约束状态变量的不变性条件。<br>3、建立对象状态的并发访问管理策略。<br>定义了如何在不违背对象不变条件或后验条件的情况下对其状态的访问操作进行协同。同步策略规定了如何将不可变性，线程封闭，与加锁机制等结合起来以维护线程的安全性，并且还规定了哪些变量由哪些锁保护。</p><p>一个单链表，奇数位置升序，偶数位置降序，将这个链表调整为整体升序，写出代码。</p><h3 id="2"><a class="markdownIt-Anchor" href="#2"></a> 2</h3><p>找一个无序数组的中位数<br>写了个快排，然后让我找到无序数组第k大的一个数，我说先排序再找，实际上可以用快排的partition函数。<br>快排的时间复杂度，最坏情况呢，最好情况呢，堆排序的时间复杂度呢，建堆的复杂度是多少，nlgn。<br>说说Linux的磁盘管理，一脸懵逼<br>Linux有哪些进程通信方式，五大件<br>Linux的共享内存如何实现，大概说了一下。<br>共享内存实现的具体步骤，我说没用过<br>socket网络编程，说一下TCP的三次握手和四次挥手，中间网络不好，面试官都没听清楚，很尴尬<br>跳过网络，问了项目的一些东西<br>问我如何把docker讲的很清楚，我从物理机，虚拟机到容器具体实现稍微说了下。<br>问我cgroup在linux的具体实现，不会。<br>多线程用过哪些</p><p>Java的集合类哪些是线程安全<br>分别说说这些集合类，hashmap怎么实现的<br>MySQL索引的实现，innodb的索引，b+树索引是怎么实现的，为什么用b+树做索引节点，一个节点存了多少数据，怎么规定大小，与磁盘页对应。<br>MySQL的事务隔离级别，分别解决什么问题。<br>Redis了解么，如果Redis有1亿个key，使用keys命令是否会影响线上服务，我说会，因为是单线程模型，可以部署多个节点。<br>问我知不知道有一条命令可以实现上面这个功能<br>Redis的持久化方式，aod和rdb，具体怎么实现，追加日志和备份文件，底层实现原理的话知道么，不清楚。<br>Redis的list是怎么实现的，我说用ziplist+quicklist实现的，ziplist压缩空间，quicklist实现链表。<br>sortedset怎么实现的，使用dict+skiplist实现的，问我skiplist的数据结构，大概说了下是个实现简单的快速查询结构。<br>了解什么消息队列，rmq和kafka<br>写一个层序遍历。<br>写一个插入树节点到一颗排序树的插入方法，使用递归方式找到插入位置即可。<br>一个有向图用邻接矩阵表示，并且是有权图，现在问怎么判断图中有没有环。 拓扑图<br>一个二叉树，找到二叉树中最长的一条路径。</p><p>操作系统的进程通信方式，僵尸进程和孤儿进程是什么，如何避免僵尸进程<br>那父进程怎么知道子进程结束了<br>计算机网络TCP和UDP有什么区别，为什么迅雷下载是基于UDP的，我说FTP是基于TCP，而迅雷是p2p不需要TCP那么可靠的传输保证。<br>他说不对，我说是不是因为要建立连接，开销比较大，他说不对<br>我说p2p的发送节点很多，所以不是那么需要各种传输保证，他说不对。<br>我说TCP会自动分包而TCP可以自己定义数据长度。。他还是说不对。<br>是NAT穿透问题吧，P2P网络使用UDP打洞穿透NAT，虽然现在也能用TCP打洞<br>没用拥塞控制，下的快吧。可能尽可能的利用带宽<br>操作系统的死锁必要条件，如何避免死锁。<br>写一个LRU的缓存，需要完成超时淘汰和LRU淘汰。</p><h2 id="算法岗"><a class="markdownIt-Anchor" href="#算法岗"></a> 算法岗</h2><p>Q：Batch Normalization是什么意思</p><p>Q：简单说一下LDA的思想</p><p>Q：T-SNE算法呢</p><p>Q：写一下相对熵的公式</p><p>A: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mi>l</mi><mi>o</mi><mi>g</mi><mfrac><msub><mi>q</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><msub><mi>p</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mfrac></mrow><annotation encoding="application/x-tex">P_{ij}log\frac{q_{ij}}{p_{ij}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.351032em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.808712em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.50732em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>Q：有两个字符串，你只可以进行删除操作，问你最少进行多少次操作可以使两个字符串相等。例:sea,eat需要两次删除操作</p><p>A：这个简单，思路就是用动态规划求两个字符串的最大公共字串的长度。然后使用每一个字符串的长度减去公共子字符串的长度。</p><p>Q：那咱们再加一点，如果我想要知道每个字符串需要删除的字符是那些呢，</p><p>A：那我们就需要求出最大公共字串具体是由什么字符构成的，思路也是动态规划。(很快就写完了)</p><p>Q：给你一个二叉查找树，还有一个数K。如果能找到，就返回节点，如果找不到，就返回空</p><p>Q：你是用递归的形式实现的，那么和非递归，递归怎么样?</p><p>Q：那递归有什么缺点</p><p>A:当递归层数很多的时候，容易造成内存溢出</p><p>Q：你刚刚说了鞍点，你知道鞍点的定义么，鞍点有什么特点？</p><p>Q：好的，下面我们来一个开放式的问题:现在有一组数，其中有m对数是两两有序的，请你设计一种算法来对这一组数排序。</p><p>Q：有M个有序链表（从大到小）。现在我们要取出前K大的元素。</p><p>Q：好的，那我们先来问一点C语言的。C语言中结构体struct{int i; bool b}一共占几个字节</p><p>A：如果int类型占4个字节的话，那么这个结构体一共需要8个字节。</p><p>Q：好的，那offset(b)在结构体中偏移几个字节</p><p>A：4个字节</p><p>Q：那么你会计算结构体中每个变量相对于结构体偏移几个字节么。</p><p>A：这个不太会</p><p>Q：好的。那么union了解么</p><p>A：了解，和struct类似，但是是共享内存。</p><p>Q：OK，那问一道概率方面的题把,几何分布知道什么意思么</p><p>A：听名字有点忘了，但是概念还记得</p><p>Q：那伯努利分布知道么</p><p>A：嗯，了解</p><p>Q：现在我有抛一枚硬币，正面朝上的概率是p,反面是1-p。那么第k次抛的时候出现第一次正面的概率是多少?</p><p>A: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo>)</mo><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">P(1-p)^{k-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></p><p>Q：好的，那么我们设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>z</mi><mo>=</mo><mi>k</mi><mo>)</mo><mo>=</mo><mi>p</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo>)</mo><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">f(z=k)=p(1-p)^{k-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，那你计算一下 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>(</mo><mi>z</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">E(z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span> （求个均值）</p><p>A：(想了一会) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>=</mo><mi>p</mi><mo>+</mo><mn>2</mn><mi>p</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo>)</mo><mo>+</mo><mn>3</mn><mi>p</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo>)</mo><mn>2</mn></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>m</mi><mi>p</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo>)</mo><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">E(z)=p+2p(1-p)+3p(1-p)^{2}+...+mp(1-p)^{m-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></p><p>Q：能不能计算一下 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>(</mo><mi>z</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">E(z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>的数学表达式</p><p>A：好的，思考了一会，可以使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>−</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo>)</mo><mi>E</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>=</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">E(z)-(1-p)E(z)=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 。其中A是一个等比数列。然后就可以求出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>(</mo><mi>z</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">E(z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>。</p><p>Q：ok,来做一道编程题把</p><p>A：好的</p><p>Q：我们输入两个值n和k，n表示我们有从1到n个整数，然后将这些整数都字符串化之后按字典排序，找出其中第K大的。例如:n=15,k=5.那么1-15字符串化之后排序如下:1,10,11,12,13,14,15,2,3,4,5,6,7,8,9。其中第5大的就为13。</p><p>A：好的，我想想(其实完全没思路，但是明显这种题有时间复杂度为O(1)的解)，说了几种想法，都被否了</p><p>Q：那你说一种时间复杂度为O(k)的算法也可以</p><p>A：（思索一会）O(k)的话就相当于我们将前k大个元素都求了出来。（然后开始写代码）</p><p>5分钟过去了，写好了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;后端&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#后端&quot;&gt;&lt;/a&gt; 后端&lt;/h2&gt;
&lt;h3 id=&quot;1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1&quot;&gt;&lt;/a&gt; 1&lt;/h3&gt;
&lt;p&gt;给一个数组，定义X为
      
    
    </summary>
    
      <category term="面试" scheme="https://ghostlo.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://ghostlo.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="字节跳动" scheme="https://ghostlo.github.io/tags/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>守护进程</title>
    <link href="https://ghostlo.github.io/2019/04/08/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    <id>https://ghostlo.github.io/2019/04/08/守护进程/</id>
    <published>2019-04-08T08:16:36.000Z</published>
    <updated>2019-04-08T08:19:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是守护进程"><a class="markdownIt-Anchor" href="#什么是守护进程"></a> 什么是守护进程？</h2><p>守护进程也称精灵进程（Daemon），是一种运行在后台的一种特殊的进程，它独立于控制终端并且周期性的执<br>行某种任务或等待处理某些发生的事件。由于在Linux中，每个系统与用户进行交流的界面成为终端，每一个从此终端<br>开始运行的进程都会依附于这个终端，这个终端被称为这些进程的控制终端，当控制终端被关闭的时候，相应的进程都会自动关闭。但是守护进程却能突破这种限制，它脱离于终端并且在后台运行，并且它脱离终端的目的是为了避免进程在运行的过程中的信息在任何终端中显示并且进程也不会被任何终端所产生的终端信息所打断。它从被执行的时候开始运转，知道整个系统关闭才退出（当然可以人为的杀死相应的守护进程，例：kill -9 +守护进程ID）。如果想让某个进程不因为用户或中断或其他变化而影响，那么就必须把这个进程变成一个守护进程。</p><h2 id="怎样查看哪些进程属于守护进程"><a class="markdownIt-Anchor" href="#怎样查看哪些进程属于守护进程"></a> 怎样查看哪些进程属于守护进程？</h2><p>我们可以使用ps axj命令查看系统中的进程，参数a表示不仅列出当前用户的进程,也列出所有其他用户的进程,参数x表示不仅列出有控制终端的进程,也列出所有无控制终端的进程,参数j表示列出与作业控制相关的信息。<br>凡是在TPGID一栏写着 -1 的都是没有控制终端的进程,也就是守护进程。在COMMAND⼀一列用[]括起来的名字表示内核线程,这些线程在内核里创建,没有用户空间代码,因此没有程序文件名和命令行, 通常采用以k开头的名字,表示Kernel。udevd负责维护/dev目录下的设备文件,acpid负责电源管理,syslogd负责维护/var/log下的日志⽂文件,可以看出,守护进程通 常采用以d结尾的名字,表示Daemon。<br>如何创建一个守护进程？</p><h3 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一：</h3><p>守护进程实现的步骤：</p><h4 id="重设文件权限掩码"><a class="markdownIt-Anchor" href="#重设文件权限掩码"></a> 重设文件权限掩码：</h4><p>文件权限掩码是屏蔽掉文件权限中的对应位。由于使用fork（）函数新创建的子进程继承了父进程的文件权限掩码，这就给该子进程使用文件带了很多的麻烦（比如父进程中的文件没有执行文件的权限，然而在子进程中希望执行相应的文件这个时候就会出问题）。因此在子进程中要把文件的权限掩码设置成为0，即在此时有最大的权限，这样可以大大增强该守护进程的灵活性。设置的方法是：umask（0）。</p><h4 id="创建子进程父进程退出使子进程成为孤儿进程"><a class="markdownIt-Anchor" href="#创建子进程父进程退出使子进程成为孤儿进程"></a> 创建子进程，父进程退出（使子进程成为孤儿进程）：</h4><p>这是编写守护进程的第一步，由于守护进程是脱离终端的，因此完成第一步后就会在shell终端里造成一个程序已经运行完毕的假象。之后的所有工作在子进程中完成，而用户在shell终端里则可以执行其他命令，从而在形式上做到了与控制终端脱离。实现的语句如下：if(fork()&gt;0){exit(0);}是父进程结束，然后子进程继续执行。</p><h4 id="在子进程中创建新的会话脱离控制终端"><a class="markdownIt-Anchor" href="#在子进程中创建新的会话脱离控制终端"></a> 在子进程中创建新的会话（脱离控制终端）：</h4><p>这步是创建守护进程中最重要的一步，虽然实现起来很简单，但是它的意义非常重要，在这里使用的是系统函数setsid（）来创建一个新的会话，并且担任该会话组的组长。在这里有两个概念需要解释一下，进程组合会话期。</p><p>进程组：是一个或多个进程的集合。进程组有进程组ID来唯一标识。除了进程号（PID）之外，进程组ID也是一个进程的必备属性。每个进程组都有一个组长进程，其组长进程的进程号等于进程组ID。且该进程组ID不会因组长进程的退出而受到影响。</p><p>会话周期：会话期是一个或者多个进程的集合。通常一个会话开始于用户的登录，终止于用户的退出，在此期间该用户运行的所有进程都属于这个会话期。</p><p>setsid（）函数的作用：创建一个新的会话，并且担任该会话组的组长。具体作用包括：让一个进程摆脱原会话的控制，让进程摆脱原进程的控制，让进程摆脱原控制终端的控制。</p><p>创建守护进程要调用setsid（）函数的原因：由于创建守护进程的第一步是调用fork（）函数来创建子进程，再将父进程退出。由于在调用了fork（）函数的时候，子进程拷贝了父进程的会话期、进程组、控制终端等资源、虽然父进程退出了，但是会话期、进程组、控制终端等并没有改变，因此，需要用setsid（）韩式来时该子进程完全独立出来，从而摆脱其他进程的控制。</p><h4 id="改变当前目录为根目录"><a class="markdownIt-Anchor" href="#改变当前目录为根目录"></a> 改变当前目录为根目录：</h4><p>使用fork（）创建的子进程是继承了父进程的当前工作目录，由于在进程运行中，当前目录所在的文件系统是不能卸载的，这对以后使用会造成很多的麻烦。因此通常的做法是让“/”作为守护进程的当前目录，当然也可以指定其他的别的目录来作为守护进程的工作目录。</p><h4 id="关闭不再需要的文件描述符"><a class="markdownIt-Anchor" href="#关闭不再需要的文件描述符"></a> 关闭不再需要的文件描述符：</h4><p>同文件权限码一样，用fork（）函数新建的子进程会从父进程那里继承一些已经打开了的文件。这些文件被打开的文件可能永远不会被守护进程读写，如果不进行关闭的话将会浪费系统的资源，造成进程所在的文件系统无法卸下以及引起预料的错误。按照如下方法关闭它们：</p><p>for(i=0;i 关闭打开的文件描述符close(i);</p><h4 id="守护进程的退出"><a class="markdownIt-Anchor" href="#守护进程的退出"></a> 守护进程的退出：</h4><p>上面建立了守护进程，当用户需要外部停止守护进程运行时，往往需要使用kill命令来停止该守护进程，所以守护进程中需要编码来实现kill发出的signal信号处理，达到进程的正常退出。实现该过程的函数是signal函数：</p><p>signal(SIGCHLD,SIG_IGN);</p><p>实现代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;sys/stat.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;signal.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void mydaemon()</span><br><span class="line">&#123;</span><br><span class="line">umask(0);//1</span><br><span class="line">if(fork()&gt;0)&#123;//father  2</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">setsid();//3</span><br><span class="line">chdir(&quot;/&quot;);//4</span><br><span class="line">close(0);//5</span><br><span class="line">close(1);</span><br><span class="line">close(2);</span><br><span class="line">signal(SIGCHLD,SIG_IGN);//6</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">mydaemon();</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">sleep(1);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在一个名为mydaemon的守护进程。</p><h3 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二：</h3><p>直接调用daemon函数。</p><p>daemon函数的作用：将此进程精灵化。</p><p>int daemon(int nochair,int noclose);</p><p>nochdir：这个值为0的话，表示将当前进程的工作目录设值为”/”目录。 <br>noclose:这个值 为0的话表示将所有的文件描述符都写入”/dev/null”中。”/dev/null”表示黑洞，写入里面的所有信息都被内核丢弃。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">daemon(0,0);</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">sleep(1);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是守护进程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是守护进程&quot;&gt;&lt;/a&gt; 什么是守护进程？&lt;/h2&gt;
&lt;p&gt;守护进程也称精灵进程（Daemon），是一种运行在后台的一种特殊的进程，它独立于控制终端并且周期性的执&lt;br&gt;

      
    
    </summary>
    
      <category term="操作系统" scheme="https://ghostlo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="守护进程" scheme="https://ghostlo.github.io/tags/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++指针</title>
    <link href="https://ghostlo.github.io/2019/04/07/C%E6%8C%87%E9%92%88/"/>
    <id>https://ghostlo.github.io/2019/04/07/C指针/</id>
    <published>2019-04-07T06:40:56.000Z</published>
    <updated>2019-04-07T10:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针的概念"><a class="markdownIt-Anchor" href="#指针的概念"></a> <strong>指针的概念</strong></h1><p>指针是一个特殊的变量，它里面存储的数值被解释成为内存里的一个地址。要搞清一个指针需要搞清指针的四方面的内容：指针的类型，指针所指向的类型，指针的值或者叫指针所指向的内存区，还有指针本身所占据的内存区。让我们分别说明。<br>先声明几个指针放着做例子：<br>例一：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptr;  </span><br><span class="line"><span class="keyword">char</span> *ptr;  </span><br><span class="line"><span class="keyword">int</span> **ptr;  </span><br><span class="line"><span class="keyword">int</span> (*ptr)[<span class="number">3</span>];  </span><br><span class="line"><span class="keyword">int</span> *(*ptr)[<span class="number">4</span>];</span><br></pre></td></tr></table></figure><h1 id="指针的类型"><a class="markdownIt-Anchor" href="#指针的类型"></a> <strong>指针的类型</strong></h1><p>从语法的角度看，你只要把指针声明语句里的指针名字去掉，剩下的部分就是这个指针的类型。这是指针本身所具有的类型。让我们看看例一中各个指针的类型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptr; <span class="comment">//指针的类型是int *  </span></span><br><span class="line"><span class="keyword">char</span> *ptr; <span class="comment">//指针的类型是char *  </span></span><br><span class="line"><span class="keyword">int</span> **ptr; <span class="comment">//指针的类型是 int **  </span></span><br><span class="line"><span class="keyword">int</span> (*ptr)[<span class="number">3</span>]; <span class="comment">//指针的类型是 int(*)[3]  </span></span><br><span class="line"><span class="keyword">int</span> *(*ptr)[<span class="number">4</span>]; <span class="comment">//指针的类型是 int *(*)[4]</span></span><br></pre></td></tr></table></figure><p>怎么样？找出指针的类型的方法是不是很简单？</p><h1 id="指针所指向的类型"><a class="markdownIt-Anchor" href="#指针所指向的类型"></a> <strong>指针所指向的类型</strong></h1><p>当你通过指针来访问指针所指向的内存区时，指针所指向的类型决定了编译器将把那片内存区里的内容当做什么来看待。<br>从语法上看，你只须把指针声明语句中的指针名字和名字左边的指针声明符*去掉，剩下的就是指针所指向的类型。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptr; <span class="comment">//指针所指向的类型是int  </span></span><br><span class="line"><span class="keyword">char</span> *ptr; <span class="comment">//指针所指向的的类型是char  </span></span><br><span class="line"><span class="keyword">int</span> **ptr; <span class="comment">//指针所指向的的类型是 int *  </span></span><br><span class="line"><span class="keyword">int</span> (*ptr)[<span class="number">3</span>]; <span class="comment">//指针所指向的的类型是 int()[3]  </span></span><br><span class="line"><span class="keyword">int</span> *(*ptr)[<span class="number">4</span>]; <span class="comment">//指针所指向的的类型是 int *()[4]</span></span><br></pre></td></tr></table></figure><p>在指针的算术运算中，指针所指向的类型有很大的作用。<br>指针的类型(即指针本身的类型)和指针所指向的类型是两个概念。当你对C越来越熟悉时，你会发现，把与指针搅和在一起的“类型”这个概念分成“指针的类型”和“指针所指向的类型”两个概念，是精通指针的关键点之一。我看了不少书，发现有些写得差的书中，就把指针的这两个概念搅在一起了，所以看起书来前后矛盾，越看越糊涂。</p><h1 id="指针的值"><a class="markdownIt-Anchor" href="#指针的值"></a> <strong>指针的值</strong></h1><p>指针的值是指针本身存储的数值，这个值将被编译器当作一个地址，而不是一个一般的数值。在32位程序里，所有类型的指针的值都是一个32位整数，因为32位程序里内存地址全都是32位长。<br>指针所指向的内存区就是从指针的值所代表的那个内存地址开始，长度为sizeof(指针所指向的类型)的一片内存区。以后，我们说一个指针的值是XX，就相当于说该指针指向了以XX为首地址的一片内存区域；我们说一个指针指向了某块内存区域，就相当于说该指针的值是这块内存区域的首地址。<br><strong>指针所指向的内存区和指针所指向的类型是两个完全不同的概念</strong>。<br>在例一中，指针所指向的类型已经有了，但由于指针还未初始化，所以它所指向的内存区是不存在的，或者说是无意义的。<br>以后，每遇到一个指针，都应该问问：这个指针的类型是什么？指针指向的类型是什么？该指针指向了哪里？</p><h1 id="指针本身所占据的内存区"><a class="markdownIt-Anchor" href="#指针本身所占据的内存区"></a> <strong>指针本身所占据的内存区</strong></h1><p>指针本身占了多大的内存？你只要用函数sizeof(指针的类型)测一下就知道了。在32位平台里，指针本身占据了4个字节的长度。<br>指针本身占据的内存这个概念在判断一个指针表达式是否是左值时很有用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* t[] = &#123;<span class="string">"p3423d"</span>,<span class="string">"wewr"</span>,<span class="string">"234"</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span>* p=<span class="string">"ewer"</span>;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span>* B=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"t "</span>&lt;&lt;<span class="keyword">sizeof</span>(t)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"p "</span>&lt;&lt;<span class="keyword">sizeof</span>(p)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"*t "</span>&lt;&lt;<span class="keyword">sizeof</span>(*t)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"*p "</span>&lt;&lt;<span class="keyword">sizeof</span>(*p)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"B "</span>&lt;&lt;<span class="keyword">sizeof</span>(B)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"*B "</span>&lt;&lt;<span class="keyword">sizeof</span>(*B)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"a "</span>&lt;&lt;<span class="keyword">sizeof</span>(a)&lt;&lt;<span class="string">" b "</span>&lt;&lt;<span class="keyword">sizeof</span>(b)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">char</span> k[]=<span class="string">"abcdef"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dec&lt;&lt;(<span class="keyword">unsigned</span> <span class="keyword">int</span>)k[<span class="number">3</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="keyword">sizeof</span>(k)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">string</span> s=<span class="string">"abcdef"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dec&lt;&lt;(<span class="keyword">unsigned</span> <span class="keyword">int</span>)s[<span class="number">6</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="keyword">sizeof</span>(s)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    k[<span class="number">3</span>]=<span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    s[<span class="number">6</span>]=<span class="string">'g'</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> a1=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(a1=<span class="number">3</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">t <span class="number">24</span> 一个指针<span class="number">8</span> <span class="number">3</span>个就是<span class="number">24</span></span><br><span class="line">p <span class="number">8</span></span><br><span class="line">*t <span class="number">8</span>指向了一个数组，还是个指针，如果是*t[<span class="number">1</span>] 就是<span class="number">1</span></span><br><span class="line">*p <span class="number">1</span>一个<span class="keyword">char</span>是<span class="number">1</span></span><br><span class="line">B <span class="number">8</span>指针</span><br><span class="line">*B <span class="number">4</span><span class="keyword">int</span></span><br><span class="line">a <span class="number">400</span> b <span class="number">400</span>数组</span><br><span class="line"><span class="number">100</span> <span class="number">7</span></span><br><span class="line"><span class="number">0</span> <span class="number">24</span><span class="built_in">string</span>的<span class="keyword">sizeof</span>在不同编译器中不一样，但<span class="keyword">char</span>是可以的，<span class="built_in">strlen</span>区别</span><br><span class="line">abc</span><br><span class="line">abcdef</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="指针的算术运算"><a class="markdownIt-Anchor" href="#指针的算术运算"></a> <strong>指针的算术运算</strong></h1><p>指针可以加上或减去一个整数。指针的这种运算的意义和通常的数值的加减运算的意义是不一样的。例如：<br>例二：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">char</span> a[<span class="number">20</span>];  </span><br><span class="line"> <span class="keyword">int</span> *ptr=a;  </span><br><span class="line">...  </span><br><span class="line">...  </span><br><span class="line"> ptr++;</span><br></pre></td></tr></table></figure><p>在上例中，指针ptr的类型是int*,它指向的类型是int，它被初始化为指向整形变量a。接下来的第3句中，指针ptr被加了1，编译器是这样处理的：它把指针ptr的值加上了sizeof(int)，在32位程序中，是被加上了4。由于地址是用字节做单位的，故ptr所指向的地址由原来的变量a的地址向高地址方向增加了4个字节。<br>由于char类型的长度是一个字节，所以，原来ptr是指向数组a的第0号单元开始的四个字节，此时指向了数组a中从第4号单元开始的四个字节。<br>我们可以用一个指针和一个循环来遍历一个数组，看例子：<br>例三：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">20</span>];  </span><br><span class="line"><span class="keyword">int</span> *ptr=<span class="built_in">array</span>;  </span><br><span class="line">...  </span><br><span class="line"><span class="comment">//此处略去为整型数组赋值的代码。  </span></span><br><span class="line">...  </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)  </span><br><span class="line">&#123;  </span><br><span class="line">    (*ptr)++;  </span><br><span class="line">    ptr++；  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子将整型数组中各个单元的值加1。由于每次循环都将指针ptr加1，所以每次循环都能访问数组的下一个单元。再看例子：<br>例四：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a[<span class="number">20</span>];  </span><br><span class="line"><span class="keyword">int</span> *ptr = a;  </span><br><span class="line">...  </span><br><span class="line">...  </span><br><span class="line">ptr += <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>在这个例子中，ptr被加上了5，编译器是这样处理的：将指针ptr的值加上5乘<strong>sizeof(int)</strong>，在32位程序中就是加上了5乘4=20。由于地址的单位是字节，故现在的ptr所指向的地址比起加5后的ptr所指向的地址来说，向高地址方向移动了20个字节。在这个例子中，没加5前的ptr指向数组a的第0号单元开始的四个字节，加5后，ptr已经指向了数组a的合法范围之外了。虽然这种情况在应用上会出问题，但在语法上却是可以的。这也体现出了指针的灵活性。<br>如果上例中，ptr是被减去5，那么处理过程大同小异，只不过ptr的值是被减去5乘sizeof(int)，新的ptr指向的地址将比原来的ptr所指向的地址向低地址方向移动了20个字节。<br>总结一下，一个指针ptrold加上一个整数n后，结果是一个新的指针ptrnew，ptrnew的类型和ptrold的类型相同，ptrnew所指向的类型和ptrold所指向的类型也相同。ptrnew的值将比ptrold的值增加了n乘sizeof(ptrold所指向的类型)个字节。就是说，ptrnew所指向的内存区将比ptrold所指向的内存区向高地址方向移动了n乘sizeof(ptrold所指向的类型)个字节。一个指针ptrold减去一个整数n后，结果是一个新的指针ptrnew，ptrnew的类型和ptrold的类型相同，ptrnew所指向的类型和ptrold所指向的类型也相同。ptrnew的值将比ptrold的值减少了n乘sizeof(ptrold所指向的类型)个字节，就是说，ptrnew所指向的内存区将比ptrold所指向的内存区向低地址方向移动了n乘sizeof(ptrold所指向的类型)个字节。</p><h1 id="运算符和"><a class="markdownIt-Anchor" href="#运算符和"></a> <strong>运算符&amp;和*</strong></h1><p>这里&amp;是取地址运算符，* 是…书上叫做“间接运算符”。&amp;a的运算结果是一个指针，指针的类型是a的类型加个* ，指针所指向的类型是a的类型，指针所指向的地址嘛，那就是a的地址。<em>p的运算结果就五花八门了。总之</em>p的结果是p所指向的东西，这个东西有这些特点：它的类型是p指向的类型，它所占用的地址是p所指向的地址。<br>例五：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">12</span>;  </span><br><span class="line"><span class="keyword">int</span> b;  </span><br><span class="line"><span class="keyword">int</span> *p;  </span><br><span class="line"><span class="keyword">int</span> **ptr;  </span><br><span class="line">p=&amp;a;<span class="comment">//&amp;a的结果是一个指针，类型是int*，指向的类型是int，指向的地址是a的地址。  </span></span><br><span class="line">*p=<span class="number">24</span>;<span class="comment">//*p的结果，在这里它的类型是int，它所占用的地址是p所指向的地址，显然，*p就是变量a。</span></span><br><span class="line">ptr=&amp;p;<span class="comment">//&amp;p的结果是个指针，该指针的类型是p的类型加个*，在这里是int**。该指针所指向的类型是p的类型，这里是int*。该指针所指向的地址就是指针p自己的地址。 </span></span><br><span class="line">*ptr=&amp;b;<span class="comment">//*ptr是个指针，&amp;b的结果也是个指针，且这两个指针的类型和所指向的类型是一样的，所以?amp;b来给*ptr赋值就是毫无问题的了。</span></span><br><span class="line">**ptr=<span class="number">34</span>;<span class="comment">//*ptr的结果是ptr所指向的东西，在这里是一个指针，对这个指针再做一次*运算，结果就是一个int类型的变量。</span></span><br></pre></td></tr></table></figure><h1 id="指针表达式"><a class="markdownIt-Anchor" href="#指针表达式"></a> <strong>指针表达式</strong></h1><p>一个表达式的最后结果如果是一个指针，那么这个表达式就叫指针表达式。下面是一些指针表达式的例子：<br>例六：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b;  </span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>];  </span><br><span class="line"><span class="keyword">int</span> *pa;  </span><br><span class="line">pa=&amp;a;<span class="comment">//&amp;a是一个指针表达式。  </span></span><br><span class="line"><span class="keyword">int</span> **ptr=&amp;pa;<span class="comment">//&amp;pa也是一个指针表达式。  </span></span><br><span class="line">*ptr=&amp;b;<span class="comment">//*ptr和&amp;b都是指针表达式。  </span></span><br><span class="line">pa=<span class="built_in">array</span>;  </span><br><span class="line">pa++;<span class="comment">//这也是指针表达式。</span></span><br></pre></td></tr></table></figure><p>例七：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *arr[<span class="number">20</span>];  </span><br><span class="line"><span class="keyword">char</span> **parr=arr;<span class="comment">//如果把arr看作指针的话，arr也是指针表达式  </span></span><br><span class="line"><span class="keyword">char</span> *str;  </span><br><span class="line">str=*parr;<span class="comment">//*parr是指针表达式  </span></span><br><span class="line">str=*(parr+<span class="number">1</span>);<span class="comment">//*(parr+1)是指针表达式  </span></span><br><span class="line">str=*(parr+<span class="number">2</span>);<span class="comment">//*(parr+2)是指针表达式</span></span><br></pre></td></tr></table></figure><p>由于指针表达式的结果是一个指针，所以指针表达式也具有指针所具有的四个要素：指针的类型，指针所指向的类型，指针指向的内存区，指针自身占据的内存。<br>好了，当一个指针表达式的结果指针已经明确地具有了指针自身占据的内存的话，这个指针表达式就是一个左值，否则就不是一个左值。 在例七中，&amp;a不是一个左值，因为它还没有占据明确的内存。<em>ptr是一个左值，因为</em>ptr这个指针已经占据了内存，其实<em>ptr就是指针pa，既然pa已经在内存中有了自己的位置，那么</em>ptr当然也有了自己的位置。</p><h1 id="数组和指针的关系"><a class="markdownIt-Anchor" href="#数组和指针的关系"></a> <strong>数组和指针的关系</strong></h1><p>数组的数组名其实可以看作一个指针。看下例：<br>例八：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;,value;  </span><br><span class="line">...  </span><br><span class="line">...  </span><br><span class="line">value=<span class="built_in">array</span>[<span class="number">0</span>];<span class="comment">//也可写成：value=*array;  </span></span><br><span class="line">value=<span class="built_in">array</span>[<span class="number">3</span>];<span class="comment">//也可写成：value=*(array+3);  </span></span><br><span class="line">value=<span class="built_in">array</span>[<span class="number">4</span>];<span class="comment">//也可写成：value=*(array+4);</span></span><br></pre></td></tr></table></figure><p>上例中，一般而言数组名array代表数组本身，类型是int [10]，但如果把array看做指针的话，它指向数组的第0个单元，类型是int <em>，所指向的类型是数组单元的类型即int。因此</em>array等于0就一点也不奇怪了。同理，array+3是一个指向数组第3个单元的指针，所以*(array+3)等于3。其它依此类推。<br>例九：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">char *str[3]=&#123;  </span><br><span class="line">&quot;Hello,this is a sample!&quot;,  </span><br><span class="line">&quot;Hi,good morning.&quot;,  </span><br><span class="line">&quot;Hello world&quot;  </span><br><span class="line">&#125;;  </span><br><span class="line">char s[80]；  </span><br><span class="line">strcpy(s,str[0]);//也可写成strcpy(s,*str);  </span><br><span class="line">strcpy(s,str[1]);//也可写成strcpy(s,*(str+1));  </span><br><span class="line">strcpy(s,str[2]);//也可写成strcpy(s,*(str+2));</span><br></pre></td></tr></table></figure><p>上例中，str是一个三单元的数组，该数组的每个单元都是一个指针，这些指针各指向一个字符串。把指针数组名str当作一个指针的话，它指向数组的第0号单元，它的类型是char**，它指向的类型是char <em>。<br><em>str也是一个指针，它的类型是char</em>，它所指向的类型是char，它指向的地址是字符串&quot;Hello,this is a sample!&quot;的第一个字符的地址，即’H’的地址。 str+1也是一个指针，它指向数组的第1号单元，它的类型是char</em>*，它指向的类型是char <em>。<br><em>(str+1)也是一个指针，它的类型是char</em>，它所指向的类型是char，它指向&quot;Hi,good morning.&quot;的第一个字符’H’，等等。<br>下面总结一下数组的数组名的问题。声明了一个数组TYPE array[n]，则数组名称array就有了两重含义：第一，它代表整个数组，它的类型是TYPE [n]；第二，它是一个指针，该指针的类型是TYPE</em>，该指针指向的类型是TYPE，也就是数组单元的类型，该指针指向的内存区就是数组第0号单元，该指针自己占有单独的内存区，注意它和数组第0号单元占据的内存区是不同的。该指针的值是不能修改的，即类似array++的表达式是错误的。<br>在不同的表达式中数组名array可以扮演不同的角色。<br>在表达式sizeof(array)中，数组名array代表数组本身，故这时sizeof函数测出的是整个数组的大小。<br>在表达式*array中，array扮演的是指针，因此这个表达式的结果就是数组第0号单元的值。sizeof(<em>array)测出的是数组单元的大小。<br>表达式array+n（其中n=0，1，2，…。）中，array扮演的是指针，故array+n的结果是一个指针，它的类型是TYPE</em>，它指向的类型是TYPE，它指向数组第n号单元。故sizeof(array+n)测出的是指针类型的大小。<br>例十：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>];  </span><br><span class="line"><span class="keyword">int</span> (*ptr)[<span class="number">10</span>];  </span><br><span class="line">ptr=&amp;<span class="built_in">array</span>;</span><br></pre></td></tr></table></figure><p>上例中ptr是一个指针，它的类型是int (*)[10]，他指向的类型是int [10]，我们用整个数组的首地址来初始化它。在语句ptr=&amp;array中，array代表数组本身。<br>本节中提到了函数sizeof()，那么我来问一问，sizeof(指针名称)测出的究竟是指针自身类型的大小呢还是指针所指向的类型的大小？答案是前者。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (*ptr)[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>则在32位程序中，有：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">int</span>(*)[<span class="number">10</span>])==<span class="number">4</span>  </span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">int</span> [<span class="number">10</span>])==<span class="number">40</span>  </span><br><span class="line"><span class="keyword">sizeof</span>(ptr)==<span class="number">4</span></span><br></pre></td></tr></table></figure><p>实际上，sizeof(对象)测出的都是对象自身的类型的大小，而不是别的什么类型的大小。</p><h1 id="指针和结构类型的关系"><a class="markdownIt-Anchor" href="#指针和结构类型的关系"></a> <strong>指针和结构类型的关系</strong></h1><p>可以声明一个指向结构类型对象的指针。<br>例十一：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span>  &#123;</span>  </span><br><span class="line"><span class="keyword">int</span> a;  </span><br><span class="line"><span class="keyword">int</span> b;  </span><br><span class="line"><span class="keyword">int</span> c;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">MyStruct ss=&#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;;<span class="comment">//声明了结构对象ss，并把ss的三个成员初始化为20，30和40。</span></span><br><span class="line">MyStruct *ptr=&amp;ss;<span class="comment">//声明了一个指向结构对象ss的指针。它的类型是</span></span><br><span class="line">MyStruct*,它指向的类型是MyStruct。</span><br><span class="line"><span class="keyword">int</span> *pstr=(<span class="keyword">int</span>*)&amp;ss;<span class="comment">//声明了一个指向结构对象ss的指针。但是它的类型和它指向的类型和ptr是不同的。</span></span><br></pre></td></tr></table></figure><p>请问怎样通过指针ptr来访问ss的三个成员变量？<br>答案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ptr-&gt;a;  </span><br><span class="line">ptr-&gt;b;  </span><br><span class="line">ptr-&gt;c;</span><br></pre></td></tr></table></figure><p>又请问怎样通过指针pstr来访问ss的三个成员变量？<br>答案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*pstr；//访问了ss的成员a。  </span><br><span class="line">*(pstr+1);//访问了ss的成员b。  </span><br><span class="line">*(pstr+2)//访问了ss的成员c。</span><br></pre></td></tr></table></figure><p>呵呵，虽然我在我的MSVC++6.0上调式过上述代码，但是要知道，这样使用pstr来访问结构成员是不正规的，为了说明为什么不正规，让我们看看怎样通过指针来访问数组的各个单元：<br>例十二：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">3</span>]=&#123;<span class="number">35</span>,<span class="number">56</span>,<span class="number">37</span>&#125;;  </span><br><span class="line"><span class="keyword">int</span> *pa=<span class="built_in">array</span>;</span><br></pre></td></tr></table></figure><p>通过指针pa访问数组array的三个单元的方法是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*pa;<span class="comment">//访问了第0号单元  </span></span><br><span class="line">*(pa+<span class="number">1</span>);<span class="comment">//访问了第1号单元  </span></span><br><span class="line">*(pa+<span class="number">2</span>);<span class="comment">//访问了第2号单元</span></span><br></pre></td></tr></table></figure><p>从格式上看倒是与通过指针访问结构成员的不正规方法的格式一样。<br>所有的C/C++编译器在排列数组的单元时，总是把各个数组单元存放在连续的存储区里，单元和单元之间没有空隙。但在存放结构对象的各个成员时，在某种编译环境下，可能会需要字对齐或双字对齐或者是别的什么对齐，需要在相邻两个成员之间加若干个“填充字节”，这就导致各个成员之间可能会有若干个字节的空隙。<br>所以，在例十二中，即使<em>pstr访问到了结构对象ss的第一个成员变量a，也不能保证</em>(pstr+1)就一定能访问到结构成员b。因为成员a和成员b之间可能会有若干填充字节，说不定*(pstr+1)就正好访问到了这些填充字节呢。这也证明了指针的灵活性。要是你的目的就是想看看各个结构成员之间到底有没有填充字节，嘿，这倒是个不错的方法。<br>通过指针访问结构成员的正确方法应该是象例十二中使用指针ptr的方法。</p><h1 id="指针和函数的关系"><a class="markdownIt-Anchor" href="#指针和函数的关系"></a> <strong>指针和函数的关系</strong></h1><p>可以把一个指针声明成为一个指向函数的指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun1</span><span class="params">(<span class="keyword">char</span>*,<span class="keyword">int</span>)</span></span>;  </span><br><span class="line"><span class="keyword">int</span> (*pfun1)(<span class="keyword">char</span>*,<span class="keyword">int</span>);  </span><br><span class="line">pfun1=fun1;  </span><br><span class="line">....  </span><br><span class="line">....  </span><br><span class="line"><span class="keyword">int</span> a=(*pfun1)(<span class="string">"abcdefg"</span>,<span class="number">7</span>);<span class="comment">//通过函数指针调用函数。</span></span><br></pre></td></tr></table></figure><p>可以把指针作为函数的形参。在函数调用语句中，可以用指针表达式来作为实参。</p><p><a href="http://www.cnblogs.com/ggjucheng/archive/2011/12/13/2286391.html" target="_blank" rel="noopener">THANKS</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;指针的概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#指针的概念&quot;&gt;&lt;/a&gt; &lt;strong&gt;指针的概念&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;指针是一个特殊的变量，它里面存储的数值被解释成为内存里的一个地址。要搞清一个指针需要搞清指针
      
    
    </summary>
    
      <category term="C++" scheme="https://ghostlo.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://ghostlo.github.io/tags/C/"/>
    
      <category term="指针" scheme="https://ghostlo.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>敏捷开发</title>
    <link href="https://ghostlo.github.io/2019/04/07/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    <id>https://ghostlo.github.io/2019/04/07/敏捷开发/</id>
    <published>2019-04-07T02:51:02.000Z</published>
    <updated>2019-04-07T02:56:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迭代开发"><a class="markdownIt-Anchor" href="#迭代开发"></a> 迭代开发</h2><p><strong>敏捷开发的核心是迭代开发（iterative development）。敏捷一定是采用迭代开发的方式。</strong></p><p>那么什么是&quot;迭代开发&quot;呢？迭代的英文是 iterative，直译为&quot;重复&quot;，迭代开发其实就是&quot;重复开发&quot;。</p><p>对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次&quot;大开发&quot;；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次&quot;大开发&quot;变成多次&quot;小开发&quot;，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。</p><p>举例来说，SpaceX 公司想造一个大推力火箭，将人类送到火星。但是，它不是一开始就造大火箭，而是先造一个最简陋的小火箭 Falcon 1。结果，第一次发射就爆炸了，直到第四次发射，才成功进入轨道。然后，开发了中型火箭 Falcon 9，九年中发射了70次。最后，才开发 Falcon 重型火箭。如果 SpaceX 不采用迭代开发，它可能直到现在还无法上天。</p><p>**迭代开发将一个大任务，分解成多次连续的开发，本质就是逐步改进。**开发者先快速发布一个有效但不完美的最简版本，然后不断迭代。每一次迭代都包含规划、设计、编码、测试、评估五个步骤，不断改进产品，添加新功能。通过频繁的发布，以及跟踪对前一次迭代的反馈，最终接近较完善的产品形态。</p><h2 id="增量开发"><a class="markdownIt-Anchor" href="#增量开发"></a> 增量开发</h2><p>迭代开发只是要求将开发分成多个迭代，并没有回答一个重要的问题：怎么划分迭代，哪个任务在这个迭代，哪个任务在下个迭代？这时，一般采用&quot;增量开发&quot;（incremental development）划分迭代。</p><p><strong>所谓&quot;增量开发&quot;，指的是软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。</strong></p><p>举例来说，房产公司开发一个10栋楼的小区。如果采用增量开发的模式，该公司第一个迭代就是交付一号楼，第二个迭代交付二号楼…每个迭代都是完成一栋完整的楼。而不是第一个迭代挖好10栋楼的地基，第二个迭代建好每栋楼的骨架，第三个迭代架设屋顶…</p><p><strong>增量开发加上迭代开发，才算真正的敏捷开发。</strong></p><h2 id="敏捷开发的好处"><a class="markdownIt-Anchor" href="#敏捷开发的好处"></a> 敏捷开发的好处</h2><h3 id="早期交付"><a class="markdownIt-Anchor" href="#早期交付"></a> 早期交付</h3><p><strong>敏捷开发的第一个好处，就是早期交付，从而大大降低成本。</strong></p><p>还是以上一节的房产公司为例，如果按照传统的&quot;瀑布开发模式&quot;，先挖10栋楼的地基、再盖骨架、然后架设屋顶，每个阶段都等到前一个阶段完成后开始，可能需要两年才能一次性交付10栋楼。也就是说，如果不考虑预售，该项目必须等到两年后才能回款。</p><p>敏捷开发是六个月后交付一号楼，后面每两个月交付一栋楼。因此，半年就能回款10%，后面每个月都会有现金流，资金压力就大大减轻了。</p><h3 id="降低风险"><a class="markdownIt-Anchor" href="#降低风险"></a> 降低风险</h3><p><strong>敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。</strong></p><p>请想一想，哪一种情况损失比较小：10栋楼都造好以后，才发现卖不出去，还是造好第一栋楼，就发现卖不出去，从而改进或停建后面9栋楼？</p><p>对于软件项目来说，先有一个原型产品，了解市场的接受程度，往往是项目成功的关键。有一本书叫做《梦断代码》，副标题就是&quot;20+个程序员，三年时间，4732个bug，100+万美元，最后失败的故事&quot;，这就是没有采用敏捷开发的结果。相反的，Instagram 最初是一个地理位置打卡 App，后来发现用户不怎么在乎地理位置，更喜欢上传照片，就改做照片上传软件，结果成了独角兽。</p><p>由于敏捷开发可以不断试错，找出对业务最重要的功能，然后通过迭代，调整软件方向。相比传统方式，大大增加了产品成功的可能性。如果市场需求不确定，或者你对该领域不熟悉，那么敏捷开发几乎是唯一可行的应对方式。</p><h2 id="如何进行每一次迭代"><a class="markdownIt-Anchor" href="#如何进行每一次迭代"></a> 如何进行每一次迭代</h2><p>虽然敏捷开发将软件开发分成多个迭代，但是也要求，<strong>每次迭代都是一个完整的软件开发周期，必须按照软件工程的方法论，进行正规的流程管理。</strong><img src="/Users/longxiansheng/Desktop/ostlo_tl/public/images/bg2019030704.jpg" alt="bg2019030704"></p><p>具体来说，每次迭代都必须依次完成以下五个步骤。</p><blockquote><ol><li><p>需求分析（requirements analysis）</p></li><li><p>设计（design）</p></li><li><p>编码（coding）</p></li><li><p>测试（testing）</p></li><li><p>部署和评估（deployment / evaluation）</p></li></ol></blockquote><p>每个迭代大约持续2~6周。</p><h2 id="敏捷开发的价值观"><a class="markdownIt-Anchor" href="#敏捷开发的价值观"></a> 敏捷开发的价值观</h2><p>《敏捷软件开发宣言》里面提到四个价值观。</p><blockquote><ul><li>程序员的主观能动性，以及程序员之间的互动，优于既定流程和工具。</li><li>软件能够运行，优于详尽的文档。</li><li>跟客户的密切协作，优于合同和谈判。</li><li>能够响应变化，优于遵循计划。</li></ul></blockquote><h2 id="十二条原则"><a class="markdownIt-Anchor" href="#十二条原则"></a> 十二条原则</h2><p>该宣言还提出十二条敏捷开发的原则。</p><ol><li>通过早期和持续交付有价值的软件，实现客户满意度。</li><li>欢迎不断变化的需求，即使是在项目开发的后期。要善于利用需求变更，帮助客户获得竞争优势。</li><li>不断交付可用的软件，周期通常是几周，越短越好。</li><li>项目过程中，业务人员与开发人员必须在一起工作。</li><li>项目必须围绕那些有内在动力的个人而建立，他们应该受到信任。</li><li>面对面交谈是最好的沟通方式。</li><li>可用性是衡量进度的主要指标。</li><li>提倡可持续的开发，保持稳定的进展速度。</li><li>不断关注技术是否优秀，设计是否良好。</li><li>简单性至关重要，尽最大可能减少不必要的工作。</li><li>最好的架构、要求和设计，来自团队内部自发的认识。</li><li>团队要定期反思如何更有效，并相应地进行调整。</li></ol><p><a href="http://www.ruanyifeng.com/blog/2019/03/agile-development.html" target="_blank" rel="noopener">来源：阮一峰</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;迭代开发&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#迭代开发&quot;&gt;&lt;/a&gt; 迭代开发&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;敏捷开发的核心是迭代开发（iterative development）。敏捷一定是采用迭代开发的方式。&lt;/stron
      
    
    </summary>
    
      <category term="软件工程" scheme="https://ghostlo.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="敏捷开发" scheme="https://ghostlo.github.io/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>mysql-面试</title>
    <link href="https://ghostlo.github.io/2019/04/06/mysql/"/>
    <id>https://ghostlo.github.io/2019/04/06/mysql/</id>
    <published>2019-04-06T14:19:09.000Z</published>
    <updated>2019-04-08T11:47:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="mysql中有哪几种锁"><a class="markdownIt-Anchor" href="#mysql中有哪几种锁"></a> <strong>Mysql中有哪几种锁？</strong></h4><ol><li><p>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</p></li><li><p>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p></li><li><p>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p></li></ol><h4 id="mysql中有哪些不同的表格"><a class="markdownIt-Anchor" href="#mysql中有哪些不同的表格"></a> <strong>Mysql中有哪些不同的表格？</strong></h4><p>共有5种类型的表格：</p><ol><li>MyISAM</li><li>Heap</li><li>Merge</li><li>INNODB</li><li>ISAM</li></ol><p><a href="https://www.cnblogs.com/EasonJim/p/7741164.html" target="_blank" rel="noopener">另</a></p><h4 id="简述在mysql数据库中myisam和innodb的区别"><a class="markdownIt-Anchor" href="#简述在mysql数据库中myisam和innodb的区别"></a> <strong>简述在MySQL数据库中MyISAM和InnoDB的区别</strong></h4><p><strong>MyISAM：</strong></p><p>不支持事务，但是每次查询都是原子的；支持表级锁，即每次操作是对整个表加锁；存储表的总行数；</p><p>一个MYISAM表有三个文件：索引文件、表结构文件、数据文件；</p><p>MyIASM基于了IASM代码，应该可以说是IASM的衍生品，不过增加了不少有用的扩展。它是MySQL的默认数据表类型，基于了传统的ISAM类型，ISAM是Indexed Sequential Access Method（有索引的顺序访问方法）的缩写，一般来说，它是存储记录和文件的标准方法。与其他存储引擎比较，MyISAM具有检查和修复表格的大多数工具。ISAM表格可以被压缩，而且它们支持全文搜索，不过它们是事务不安全的，而且也不支持外键。如果事务回滚将会造成不完全回滚，从而不具备原子性。所以假如忽略事务以及访问并发性的话，并且需要执行大量的SELECT检索语句的话，MyISAM将是最好的选择。</p><ul><li>MyISAM表(TYPE=MYISAM)是ISAM类型的一种延伸，具有很多优化和增强的特性。</li><li>是MySQL的默认表类型。</li><li>MyISAM优化了压缩比例和速度，并且可以很方便的在不同的操作系统和平台之间进行移植。</li><li>MyISAM支持大表文件(大于4G)</li><li>允许对BLOB和TEXT列进行索引</li><li>支持使用键前缀和使用完整的键搜索记录</li><li>表数据和表索引文件可以依存在不同的位置，甚至是不同的文件系统中。</li><li>即使是具有相当多的插入、更新和删除操作的表，智能防碎片逻辑也能保证其高性能的协作性。</li></ul><p><strong>InnoDb：</strong></p><p>InnoDB表(TYPE=INNODB)，是一个完全兼容ACID（事务的原子性、一致性、独立性及持久性）的、高效率的表完全支持MySQL的事务处理。精细的（行级和表级）锁提高了MySQL事务处理的带走度，同时其也支持无锁定读操作（以前只在Oracle中包含）和多版本的特性。</p><p>支持行级锁及外键约束：因此可以支持写并发</p><p>一个InnoDb引擎存储在一个文件空间（共享表空间，表大小不受操作系统控制，一个表可能分布在多个文件里），也有可能为多个（设置为独立表空，表大小受操作系统文件大小限制，一般为2G），受操作系统文件大小的限制；</p><p>主键索引采用聚集索引（索引的数据域存储数据文件本身），辅索引的数据域存储主键的值；因此从辅索引查找数据，需要先通过辅索引找到主键值，再访问辅索引；最好使用自增主键，防止插入数据时，为维持B+树结构，文件的大调整。</p><p>异步输入/输出和一系列的读缓冲将提高数据检索速度，同时可以进行文件的优化和内存的管理。需要的基础上支持自动在内存上创建散列索引来提高性能，使用缓冲来提高可靠性和数据库操作的速度。InnoDB表可以和MyISAM相媲美，甚至已经超过了MyISAM。</p><p>在不同的操作系统和体系结构上是完全可移植的。由于一直处于一致的状态（MySQL通过在启动时检查错误并修复错误来使它们更加健壮）。<strong>对外键、提交、回滚和前滚的操作的支持，使其成为MySQL中最完善的表格式</strong>。</p><p><a href="https://www.cnblogs.com/EasonJim/p/7741164.html" target="_blank" rel="noopener">thanks</a></p><h4 id="mysql中innodb支持的四种事务隔离级别名称以及逐级之间的区别"><a class="markdownIt-Anchor" href="#mysql中innodb支持的四种事务隔离级别名称以及逐级之间的区别"></a> <strong>Mysql中InnoDB支持的四种事务隔离级别名称，以及逐级之间的区别？</strong></h4><p>SQL标准定义的四个隔离级别为：</p><ol><li>read uncommited ：读到未提交数据</li><li>read committed：脏读，不可重复读</li><li>repeatable read：可重读</li><li>serializable ：串行事物</li></ol><h4 id="char和varchar的区别"><a class="markdownIt-Anchor" href="#char和varchar的区别"></a> <strong>CHAR和VARCHAR的区别？</strong></h4><p>1.CHAR和VARCHAR类型在存储和检索方面有所不同<br>2.CHAR列长度固定为创建表时声明的长度，长度值范围是1到255<br>当CHAR值被存储时，它们被用空格填充到特定长度，<strong>检索CHAR值时需删除尾随空格</strong>。</p><h4 id="主键和候选键有什么区别"><a class="markdownIt-Anchor" href="#主键和候选键有什么区别"></a> <strong>主键和候选键有什么区别？</strong></h4><p>表格的每一行都由主键唯一标识,一个表只有一个主键。</p><p>主键也是候选键。按照惯例，候选键可以被指定为主键，并且可以用于任何外键引用。</p><h4 id="myisamchk是用来做什么的"><a class="markdownIt-Anchor" href="#myisamchk是用来做什么的"></a> <strong>myisamchk是用来做什么的？</strong></h4><p>它用来压缩MyISAM表，这减少了磁盘或内存使用。</p><h4 id="myisam-static和myisam-dynamic有什么区别"><a class="markdownIt-Anchor" href="#myisam-static和myisam-dynamic有什么区别"></a> <strong>MyISAM Static和MyISAM Dynamic有什么区别？</strong></h4><p>在MyISAM Static上的所有字段有固定宽度。动态MyISAM表将具有像TEXT，BLOB等字段，以适应不同长度的数据类型。</p><p>MyISAM Static在受损情况下更容易恢复。</p><h4 id="如果一个表有一列定义为timestamp将发生什么"><a class="markdownIt-Anchor" href="#如果一个表有一列定义为timestamp将发生什么"></a> <strong>如果一个表有一列定义为TIMESTAMP，将发生什么？</strong></h4><p>每当行被更改时，时间戳字段将获取当前时间戳。</p><h4 id="列设置为auto-increment时如果在表中达到最大值会发生什么情况"><a class="markdownIt-Anchor" href="#列设置为auto-increment时如果在表中达到最大值会发生什么情况"></a> <strong>列设置为AUTO INCREMENT时，如果在表中达到最大值，会发生什么情况？</strong></h4><p>它会停止递增，任何进一步的插入都将产生错误，因为密钥已被使用。</p><h4 id="怎样才能找出最后一次插入时分配了哪个自动增量"><a class="markdownIt-Anchor" href="#怎样才能找出最后一次插入时分配了哪个自动增量"></a> <strong>怎样才能找出最后一次插入时分配了哪个自动增量？</strong></h4><p>LAST_INSERT_ID将返回由Auto_increment分配的最后一个值，并且不需要指定表名称。</p><h4 id="你怎么看到为表格定义的所有索引"><a class="markdownIt-Anchor" href="#你怎么看到为表格定义的所有索引"></a> <strong>你怎么看到为表格定义的所有索引？</strong></h4><p>索引是通过以下方式为表格定义的：</p><p>SHOW INDEX FROM &lt; tablename &gt; ;</p><h4 id="like声明中的和_是什么意思"><a class="markdownIt-Anchor" href="#like声明中的和_是什么意思"></a> <strong>LIKE声明中的％和_是什么意思？</strong></h4><p>％对应于0个或更多字符，_只是LIKE语句中的一个字符。</p><h4 id="如何在unix和mysql时间戳之间进行转换"><a class="markdownIt-Anchor" href="#如何在unix和mysql时间戳之间进行转换"></a> <strong>如何在Unix和Mysql时间戳之间进行转换？</strong></h4><p>UNIX_TIMESTAMP是从Mysql时间戳转换为Unix时间戳的命令<br>FROM_UNIXTIME是从Unix时间戳转换为Mysql时间戳的命令</p><h4 id="列对比运算符是什么"><a class="markdownIt-Anchor" href="#列对比运算符是什么"></a> <strong>列对比运算符是什么？</strong></h4><p>在SELECT语句的列比较中使用=，&lt;&gt;，&lt;=，&lt;，&gt; =，&gt;，&lt;&lt;，&gt;&gt;，&lt;=&gt;，AND，OR或LIKE运算符。</p><h4 id="mysql_fetch_array和mysql_fetch_object的区别是什么"><a class="markdownIt-Anchor" href="#mysql_fetch_array和mysql_fetch_object的区别是什么"></a> <strong>mysql_fetch_array和mysql_fetch_object的区别是什么？</strong></h4><p>以下是mysql_fetch_array和mysql_fetch_object的区别：</p><p>mysql_fetch_array（） – 将结果行作为关联数组或来自数据库的常规数组返回。</p><p>mysql_fetch_object – 从数据库返回结果行作为对象。</p><h4 id="myisam表格将在哪里存储并且还提供其存储格式"><a class="markdownIt-Anchor" href="#myisam表格将在哪里存储并且还提供其存储格式"></a> <strong>MyISAM表格将在哪里存储，并且还提供其存储格式？</strong></h4><p>每个MyISAM表格以三种格式存储在磁盘上：</p><p>“.frm”文件存储表定义</p><p>数据文件具有“.MYD”（MYData）扩展名</p><p>索引文件具有“.MYI”（MYIndex）扩展名</p><h4 id="mysql如何优化distinct"><a class="markdownIt-Anchor" href="#mysql如何优化distinct"></a> <strong>Mysql如何优化DISTINCT？</strong></h4><p>DISTINCT在所有列上转换为GROUP BY，并与ORDER BY子句结合使用。</p><p>SELECT DISTINCT t1.a FROM t1,t2 where t1.a=t2.a;</p><h4 id="如何显示前50行"><a class="markdownIt-Anchor" href="#如何显示前50行"></a> <strong>如何显示前50行？</strong></h4><p>在Mysql中，使用以下代码查询显示前50行：</p><p>SELECT … FROM …</p><p>LIMIT 0,50;</p><h4 id="可以使用多少列创建索引"><a class="markdownIt-Anchor" href="#可以使用多少列创建索引"></a> <strong>可以使用多少列创建索引？</strong></h4><p>任何标准表最多可以创建16个索引列。</p><h4 id="now和current_date有什么区别"><a class="markdownIt-Anchor" href="#now和current_date有什么区别"></a> NOW（）和CURRENT_DATE（）有什么区别?</h4><p>NOW（）命令用于显示当前年份，月份，日期，小时，分钟和秒。</p><p>CURRENT_DATE（）仅显示当前年份，月份和日期。</p><h4 id="什么是通用sql函数"><a class="markdownIt-Anchor" href="#什么是通用sql函数"></a> <strong>什么是通用SQL函数？</strong></h4><ol><li>CONCAT(A, B) – 连接两个字符串值以创建单个字符串输出。通常用于将两个或多个字段合并为一个字段。</li><li>FORMAT(X, D)- 格式化数字X到D有效数字。</li><li>CURRDATE(), CURRTIME()- 返回当前日期或时间。</li><li>NOW（） – 将当前日期和时间作为一个值返回。</li><li>MONTH（），DAY（），YEAR（），WEEK（），WEEKDAY（） – 从日期值中提取给定数据。</li><li>HOUR（），MINUTE（），SECOND（） – 从时间值中提取给定数据。</li><li>DATEDIFF（A，B） – 确定两个日期之间的差异，通常用于计算年龄</li><li>SUBTIMES（A，B） – 确定两次之间的差异。</li><li>FROMDAYS（INT） – 将整数天数转换为日期值。</li></ol><h4 id="mysql支持事务吗"><a class="markdownIt-Anchor" href="#mysql支持事务吗"></a> <strong>MYSQL支持事务吗？</strong></h4><p>在缺省模式下，MYSQL是autocommit模式的，所有的数据库更新操作都会即时提交，所以在缺省情况下，mysql是不支持事务的。</p><p>但是如果你的MYSQL表类型是使用InnoDB Tables 或 BDB tables的话，你的MYSQL就可以使用事务处理,使用SET<br>AUTOCOMMIT=0就可以使MYSQL允许在非autocommit模式，在非autocommit模式下，你必须使用COMMIT来提交你的更改，或者用ROLLBACK来回滚你的更改。</p><h4 id="mysql里记录货币用什么字段类型好"><a class="markdownIt-Anchor" href="#mysql里记录货币用什么字段类型好"></a> <strong>mysql里记录货币用什么字段类型好</strong></h4><p>NUMERIC和DECIMAL类型被Mysql实现为同样的类型，这在SQL92标准允许。他们被用于保存值，该值的准确精度是极其重要的值，例如与金钱有关的数据。当声明一个类是这些类型之一时，精度和规模的能被(并且通常是)指定。</p><p>例如：</p><p>salary DECIMAL(9,2)</p><p>在这个例子中，9(precision)代表将被用于存储值的总的小数位数，而2(scale)代表将被用于存储小数点后的位数。</p><p>因此，在这种情况下，能被存储在salary列中的值的范围是从-9999999.99到9999999.99。</p><h4 id="mysql有关权限的表都有哪几个"><a class="markdownIt-Anchor" href="#mysql有关权限的表都有哪几个"></a> <strong>mysql有关权限的表都有哪几个？</strong></h4><p>Mysql服务器通过权限表来控制用户对数据库的访问，权限表存放在mysql数据库里，由mysql_install_db脚本初始化。这些权限表分别user，db，table_priv，columns_priv和host。</p><h4 id="列的字符串类型可以是什么"><a class="markdownIt-Anchor" href="#列的字符串类型可以是什么"></a> <strong>列的字符串类型可以是什么？</strong></h4><p>字符串类型是：</p><ol><li>SET</li><li>BLOB 大二进制文件</li><li>ENUM</li><li>CHAR</li><li>TEXT</li></ol><table><thead><tr><th>字符串类型</th><th>字节</th><th>描述及存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>M</td><td>M为0~255之间的整数</td></tr><tr><td>VARCHAR(M)</td><td></td><td>M为0~65536之间的整数</td></tr><tr><td>TINYBLOB</td><td></td><td>允许长度0~255字节</td></tr><tr><td>BLOB</td><td></td><td>允许长度0~65535字节</td></tr><tr><td>MEDUIMBLOB</td><td></td><td>允许长度0~167772150字节</td></tr><tr><td>LONGBLOB</td><td></td><td>允许长度0~4294967295</td></tr><tr><td>TINYTEXT</td><td></td><td>允许长度0~255字节</td></tr><tr><td>TEXT</td><td></td><td>允许长度0~65535字节</td></tr><tr><td>MEDIUMTEXT</td><td></td><td>允许长度0~167772150字节</td></tr><tr><td>LONGTEXT</td><td></td><td>允许长度0~4294967295字节</td></tr><tr><td>VARBINARY(M)</td><td>M</td><td>允许长度0~M个字节的边长字节字符集</td></tr><tr><td>BINARY(M)</td><td>M</td><td>允许长度0~M个字节的定长字节字符集</td></tr></tbody></table><p>CHAR于VARCHAR类型</p><p>CHAR和VARCHAR很类似，都是用来保存Mysql中较短的字符串，主要区别在于:CHAR列的长度固定为创建表时声明的长度，长度可以为从0<sub>255的任何值，而VARCHAR的值可以是变长字符串，长度可以指定0</sub>65535之间的值，在检索的时候，CHAR列会删除尾部的空格而VARCHAR则保留了这些空格。</p><p>ENUM类型</p><p>枚举类型，忽略大小写，它的值范围需要在创建表时通过枚举方式显示指定，对1<sub>255个成员的枚举需要1个字节存储，对于255</sub>65535个成员，需要2个字节存储，最多允许65535个成员。</p><p>SET类型</p><p>SET和enum非常相似，里面可以包含0~64个成员，根据成员的不用，存储上也有不同。</p><p>1~8成员的集合，占1个字节</p><p>9~16成员的集合，占2个字节</p><p>17~24成员的集合，占3个字节</p><p>25~32成员的集合，占4个字节</p><p>33~64成员的集合，占8个字节</p><p>set类型一次可以选取多个成员，而ENUM则只能选一个，就相当于ENUM是单选，而set是复选。</p><h4 id="什么是非标准字符串类型"><a class="markdownIt-Anchor" href="#什么是非标准字符串类型"></a> <strong>什么是非标准字符串类型？</strong></h4><ol><li>TINYTEXT</li><li>TEXT</li><li>MEDIUMTEXT</li><li>LONGTEXT</li></ol><h4 id="blob和text有什么区别"><a class="markdownIt-Anchor" href="#blob和text有什么区别"></a> <strong>BLOB和TEXT有什么区别？</strong></h4><p>BLOB是一个二进制对象，可以容纳可变数量的数据。TEXT是一个不区分大小写的BLOB。</p><p>BLOB和TEXT类型之间的唯一区别在于对BLOB值进行排序和比较时区分大小写，对TEXT值不区分大小写。</p><h4 id="mysql数据库作发布系统的存储一天五万条以上的增量预计运维三年怎么优化"><a class="markdownIt-Anchor" href="#mysql数据库作发布系统的存储一天五万条以上的增量预计运维三年怎么优化"></a> <strong>MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？</strong></h4><p>a. 设计良好的数据库结构，允许部分数据冗余，尽量避免join查询，提高效率。<br>b. 选择合适的表字段数据类型和存储引擎，适当的添加索引。<br>c. mysql库主从读写分离。<br>d. 找规律分表，减少单表中的数据量提高查询速度。<br>e。添加缓存机制，比如memcached，apc等。<br>f. 不经常改动的页面，生成静态页面。<br>g. 书写高效率的SQL。比如 SELECT * FROM TABEL 改为 SELECT field_1, field_2, field_3 FROM TABLE.</p><h4 id="锁的优化策略"><a class="markdownIt-Anchor" href="#锁的优化策略"></a> <strong>锁的优化策略</strong></h4><ol><li>读写分离</li><li>分段加锁</li><li>减少锁持有的时间</li><li>多个线程尽量以相同的顺序去获取资源</li></ol><p>不能将锁的粒度过于细化，不然可能会出现线程的加锁和释放次数过多，反而效率不如一次加一把大锁。</p><h4 id="索引的底层实现原理和优化"><a class="markdownIt-Anchor" href="#索引的底层实现原理和优化"></a> <strong>索引的底层实现原理和优化</strong></h4><p>B+树，经过优化的B+树</p><p>主要是在所有的叶子结点中增加了指向下一个叶子节点的指针，因此InnoDB建议为大部分表使用默认自增的主键作为主索引。</p><h4 id="什么情况下设置了索引但无法使用"><a class="markdownIt-Anchor" href="#什么情况下设置了索引但无法使用"></a> <strong>什么情况下设置了索引但无法使用</strong></h4><ol><li><p>以“%”开头的LIKE语句，模糊匹配</p></li><li><p>OR语句前后没有同时使用索引</p></li><li><p>数据类型出现隐式转化（如varchar不加单引号的话可能会自动转换为int型）</p></li></ol><h4 id="实践中如何优化mysql"><a class="markdownIt-Anchor" href="#实践中如何优化mysql"></a> <strong>实践中如何优化MySQL</strong></h4><p>最好是按照以下顺序优化：</p><ol><li><p>SQL语句及索引的优化</p></li><li><p>数据库表结构的优化</p></li><li><p>系统配置的优化</p></li><li><p>硬件的优化</p></li></ol><p>详细可以查看 <a href="http://youzhixueyuan.com/mysql-slow-query-optimization-index-optimization.html" target="_blank" rel="noopener">阿里P8架构师谈：MySQL慢查询优化、索引优化、以及表等优化总结</a></p><h4 id="优化数据库的方法"><a class="markdownIt-Anchor" href="#优化数据库的方法"></a> <strong>优化数据库的方法</strong></h4><ol><li>选取最适用的字段属性，尽可能减少定义字段宽度，尽量把字段设置NOTNULL，例如’省份’、’性别’最好适用ENUM</li><li>使用连接(JOIN)来代替子查询</li><li>适用联合(UNION)来代替手动创建的临时表</li><li>事务处理</li><li>锁定表、优化事务处理</li><li>适用外键，优化锁定表</li><li>建立索引</li><li>优化查询语句</li></ol><h4 id="简单描述mysql中索引主键唯一索引联合索引的区别对数据库的性能有什么影响从读写两方面"><a class="markdownIt-Anchor" href="#简单描述mysql中索引主键唯一索引联合索引的区别对数据库的性能有什么影响从读写两方面"></a> <strong>简单描述mysql中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么影响（从读写两方面）</strong></h4><p>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。</p><p>普通索引(由关键字KEY或INDEX定义的索引)的唯一任务是加快对数据的访问速度。</p><p>普通索引允许被索引的数据列包含重复的值。如果能确定某个数据列将只包含彼此各不相同的值，在为这个数据列创建索引的时候就应该用关键字UNIQUE把它定义为一个唯一索引。也就是说，唯一索引可以保证数据记录的唯一性。</p><p>主键，是一种特殊的唯一索引，在一张表中只能定义一个主键索引，主键用于唯一标识一条记录，使用关键字 PRIMARY KEY 来创建。</p><p>索引可以覆盖多个数据列，如像INDEX(columnA, columnB)索引，这就是联合索引。</p><p>索引可以极大的提高数据的查询速度，但是会降低插入、删除、更新表的速度，因为在执行这些写操作时，还要操作索引文件。</p><h4 id="数据库中的事务是什么"><a class="markdownIt-Anchor" href="#数据库中的事务是什么"></a> <strong>数据库中的事务是什么?</strong></h4><p>事务（transaction）是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消。</p><h4 id="事务特性"><a class="markdownIt-Anchor" href="#事务特性"></a> <strong>事务特性：</strong></h4><p>（1）原子性：即不可分割性，事务要么全部被执行，要么就全部不被执行。</p><p>（2）一致性或可串性。事务的执行使得数据库从一种正确状态转换成另一种正确状态</p><p>（3）隔离性。在事务正确提交之前，不允许把该事务对数据的任何改变提供给任何其他事务，</p><p>（4）持久性。事务正确提交后，其结果将永久保存在数据库中，即使在事务提交后有了其他故障，事务的处理结果也会得到保存。</p><p>或者这样理解：</p><p>事务就是被绑定在一起作为一个逻辑工作单元的SQL语句分组，如果任何一个语句操作失败那么整个操作就被失败，以后操作就会回滚到操作前状态，或者是上有个节点。为了确保要么执行，要么不执行，就可以使用事务。要将有组语句作为事务考虑，就需要通过ACID测试，即原子性，一致性，隔离性和持久性。</p><h4 id="sql注入漏洞产生的原因如何防止"><a class="markdownIt-Anchor" href="#sql注入漏洞产生的原因如何防止"></a> <strong>SQL注入漏洞产生的原因？如何防止？</strong></h4><p>SQL注入产生的原因：程序开发过程中不注意规范书写sql语句和对特殊字符进行过滤，导致客户端可以通过全局变量POST和GET提交一些sql语句正常执行。</p><p>防止SQL注入的方式：<br>开启配置文件中的magic_quotes_gpc 和 magic_quotes_runtime设置</p><p>执行sql语句时使用addslashes进行sql语句转换</p><p>Sql语句书写尽量不要省略双引号和单引号。</p><p>过滤掉sql语句中的一些关键词：update、insert、delete、select、 * 。</p><p>提高数据库表和字段的命名技巧，对一些重要的字段根据程序的特点命名，取不易被猜到的。</p><h4 id="为表中得字段选择合适得数据类型"><a class="markdownIt-Anchor" href="#为表中得字段选择合适得数据类型"></a> <strong>为表中得字段选择合适得数据类型</strong></h4><p>字段类型优先级: 整形&gt;date,time&gt;enum,char&gt;varchar&gt;blob,text<br>优先考虑数字类型，其次是日期或者二进制类型，最后是字符串类型，同级别得数据类型，应该优先选择占用空间小的数据类型</p><h4 id="存储时期"><a class="markdownIt-Anchor" href="#存储时期"></a> <strong>存储时期</strong></h4><p>Datatime:以 YYYY-MM-DD HH:MM:SS 格式存储时期时间，精确到秒，占用8个字节得存储空间，datatime类型与时区无关<br>Timestamp:以时间戳格式存储，占用4个字节，范围小1970-1-1到2038-1-19，显示依赖于所指定得时区，默认在第一个列行的数据修改时可以自动得修改timestamp列得值<br>Date:（生日）占用得字节数比使用字符串.储存要少，使用date只需要3个字节，存储日期月份，还可以利用日期时间函数进行日期间得计算<br>Time:存储时间部分得数据<br>注意:不要使用字符串类型来存储日期时间数据（通常比字符串占用得储存空间小，在进行查找过滤可以利用日期得函数）<br>使用int存储日期时间不如使用timestamp类型</p><h4 id="对于关系型数据库而言索引是相当重要的概念请回答有关索引的几个问题"><a class="markdownIt-Anchor" href="#对于关系型数据库而言索引是相当重要的概念请回答有关索引的几个问题"></a> <strong>对于关系型数据库而言，索引是相当重要的概念，请回答有关索引的几个问题：</strong></h4><ol><li>索引的目的是什么？</li></ol><p>快速访问数据表中的特定信息，提高检索速度<br>创建唯一性索引，保证数据库表中每一行数据的唯一性。<br>加速表和表之间的连接</p><p>使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间</p><ol start="2"><li>索引对数据库系统的负面影响是什么？</li></ol><p>负面影响：<br>创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也需要占用物理空间；当对表进行增、删、改、的时候索引也要动态维护，这样就降低了数据的维护速度。</p><ol start="3"><li>为数据表建立索引的原则有哪些？</li></ol><p>在最频繁使用的、用以缩小查询范围的字段上建立索引。</p><p>在频繁使用的、需要排序的字段上建立索引</p><ol start="4"><li>什么情况下不宜建立索引？</li></ol><p>对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引。</p><p>对于一些特殊的数据类型，不宜建立索引，比如文本字段（text）等</p><h4 id="解释mysql外连接-内连接与自连接的区别"><a class="markdownIt-Anchor" href="#解释mysql外连接-内连接与自连接的区别"></a> <strong>解释MySQL外连接、内连接与自连接的区别</strong></h4><p>先说什么是交叉连接: 交叉连接又叫笛卡尔积，它是指不使用任何条件，直接将一个表的所有记录和另一个表中的所有记录一一匹配。</p><p>内连接 则是只有条件的交叉连接，根据某个条件筛选出符合条件的记录，不符合条件的记录不会出现在结果集中，即内连接只连接匹配的行。<br>外连接 其结果集中不仅包含符合连接条件的行，而且还会包括左表、右表或两个表中<br>的所有数据行，这三种情况依次称之为左外连接，右外连接，和全外连接。</p><p>左外连接，也称左连接，左表为主表，左表中的所有记录都会出现在结果集中，对于那些在右表中并没有匹配的记录，仍然要显示，右边对应的那些字段值以NULL来填充。右外连接，也称右连接，右表为主表，右表中的所有记录都会出现在结果集中。左连接和右连接可以互换，MySQL目前还不支持全外连接。</p><h4 id="myql中的事务回滚机制概述"><a class="markdownIt-Anchor" href="#myql中的事务回滚机制概述"></a> <strong>Myql中的事务回滚机制概述</strong></h4><p>事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做，是一个不可分割的工作单位，事务回滚是指将该事务已经完成的对数据库的更新操作撤销。</p><p>要同时修改数据库中两个不同表时，如果它们不是一个事务的话，当第一个表修改完，可能第二个表修改过程中出现了异常而没能修改，此时就只有第二个表依旧是未修改之前的状态，而第一个表已经被修改完毕。而当你把它们设定为一个事务的时候，当第一个表修改完，第二表修改出现异常而没能修改，第一个表和第二个表都要回到未修改的状态，这就是所谓的事务回滚</p><h4 id="sql语言包括哪几部分每部分都有哪些操作关键字"><a class="markdownIt-Anchor" href="#sql语言包括哪几部分每部分都有哪些操作关键字"></a> <strong>SQL语言包括哪几部分？每部分都有哪些操作关键字？</strong></h4><p>SQL语言包括数据定义(DDL)、数据操纵(DML),数据控制(DCL)和数据查询（DQL）四个部分。</p><p>数据定义：Create Table,Alter Table,Drop Table, Craete/Drop Index等</p><p>数据操纵：Select ,insert,update,delete,</p><p>数据控制：grant,revoke</p><p>数据查询：select</p><h4 id="完整性约束包括哪些"><a class="markdownIt-Anchor" href="#完整性约束包括哪些"></a> <strong>完整性约束包括哪些？</strong></h4><p>数据完整性(Data Integrity)是指数据的精确(Accuracy)和可靠性(Reliability)。</p><h4 id="分为以下四类"><a class="markdownIt-Anchor" href="#分为以下四类"></a> <strong>分为以下四类：</strong></h4><ol><li><p>实体完整性：规定表的每一行在表中是惟一的实体。</p></li><li><p>域完整性：是指表中的列必须满足某种特定的数据类型约束，其中约束又包括取值范围、精度等规定。</p></li><li><p>参照完整性：是指两个表的主关键字和外关键字的数据应一致，保证了表之间的数据的一致性，防止了数据丢失或无意义的数据在数据库中扩散。</p></li><li><p>用户定义的完整性：不同的关系数据库系统根据其应用环境的不同，往往还需要一些特殊的约束条件。用户定义的完整性即是针对某个特定关系数据库的约束条件，它反映某一具体应用必须满足的语义要求。</p></li></ol><p>与表有关的约束：包括列约束(NOT NULL（非空约束）)和表约束(PRIMARY KEY、foreign key、check、UNIQUE) 。</p><h4 id="什么是锁"><a class="markdownIt-Anchor" href="#什么是锁"></a> <strong>什么是锁？</strong></h4><p>数据库是一个多用户使用的共享资源。当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。</p><p>加锁是实现数据库并发控制的一个非常重要的技术。当事务在对某个数据对象进行操作前，先向系统发出请求，对其加锁。加锁后事务就对该数据对象有了一定的控制，在该事务释放锁之前，其他的事务不能对此数据对象进行更新操作。</p><h4 id="基本锁类型"><a class="markdownIt-Anchor" href="#基本锁类型"></a> <strong>基本锁类型</strong></h4><p>锁包括行级锁、表级锁、页面锁（见开头）</p><h4 id="什么叫视图游标是什么"><a class="markdownIt-Anchor" href="#什么叫视图游标是什么"></a> <strong>什么叫视图？游标是什么？</strong></h4><p>视图：是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，视图通常是有一个表或者多个表的行或列的子集。<strong>对视图的修改影响基本表</strong>。它使得我们获取数据更容易，相比多表查询。<a href="https://www.cnblogs.com/chenpi/p/5133648.html" target="_blank" rel="noopener">另</a>不能在一张由多张关联表连接而成的视图上做同时修改两张表的操作；<strong>视图与表是一对一关系时</strong>如果没有其它约束（如视图中没有的字段，在基本表中是必填字段情况），是可以进行<strong>增删改</strong>数据操作；修改操作时要小心，不经意间你已经修改了基本表里的多条数据，对视图的创建与删除不影响基本表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`view_user_course`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> ALGORITHM = UNDEFINED </span><br><span class="line">DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> </span><br><span class="line"><span class="keyword">SQL</span> <span class="keyword">SECURITY</span> DEFINER </span><br><span class="line"><span class="keyword">VIEW</span> <span class="string">`view_user_course`</span> <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        <span class="string">`uc`</span>.<span class="string">`id`</span> <span class="keyword">AS</span> <span class="string">`id`</span>,</span><br><span class="line">        <span class="string">`u`</span>.<span class="string">`name`</span> <span class="keyword">AS</span> <span class="string">`username`</span>,</span><br><span class="line">        <span class="string">`c`</span>.<span class="string">`name`</span> <span class="keyword">AS</span> <span class="string">`coursename`</span></span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        (</span><br><span class="line">            (</span><br><span class="line">                <span class="string">`user`</span> <span class="string">`u`</span></span><br><span class="line">                <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="string">`user_course`</span> <span class="string">`uc`</span> <span class="keyword">ON</span> ((<span class="string">`u`</span>.<span class="string">`id`</span> = <span class="string">`uc`</span>.<span class="string">`userid`</span>))</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="string">`course`</span> <span class="string">`c`</span> <span class="keyword">ON</span> ((<span class="string">`uc`</span>.<span class="string">`courseid`</span> = <span class="string">`c`</span>.<span class="string">`id`</span>))</span><br><span class="line">        )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>游标：是对查询出来的结果集作为一个单元来有效的处理。游标可以定在该单元中的特定行，从结果集的当前行检索一行或多行。可以对结果集当前行做修改。一般不使用游标，但是需要逐条处理数据的时候，游标显得十分重要。</p><p>需要强调的是，游标必须在定义处理程序之前被定义，但变量必须在定义游标之前被定义，顺序就是变量定义-游标定义-处理程序。</p><ol><li><p>定义游标：DECLARE cursor_name CURSOR FOR select_statement 这个语句声明一个游标。也可以在子程序中定义多个游标，一个块中的每一个游标必须命名唯一。声明游标后也是单条操作的。</p></li><li><p>游标OPEN：OPEN cursor_name 这个语句打开先前声明的游标。</p></li><li><p>游标FETCH：FETCH cursor_name INTO var_name [, var_name] … 这个语句用指定的打开游标读取下一行（如果有下一行的话），并且前进游标指针至该行。</p></li><li><p>游标CLOSE：CLOSE cursor_name 这个语句关闭先前打开的游标，注意，用完后必须关闭。</p></li></ol><h4 id="什么是存储过程用什么来调用"><a class="markdownIt-Anchor" href="#什么是存储过程用什么来调用"></a> <strong>什么是存储过程？用什么来调用？</strong></h4><p>答：存储过程是一个预编译的SQL语句，优点是允许模块化的设计，就是说只需创建一次，以后在该程序中就可以调用多次。如果某次操作需要执行多次SQL，使用存储过程比单纯SQL语句执行要快。可以用一个命令对象来调用存储过程。</p><h4 id="如何通俗地理解三个范式"><a class="markdownIt-Anchor" href="#如何通俗地理解三个范式"></a> <strong>如何通俗地理解三个范式？</strong></h4><p>第一范式：1NF是对属性的原子性约束，要求属性具有原子性，不可再分解；<br>第二范式：2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性,<strong>为实现区分通常需要我们设计一个主键来实现</strong><br>第三范式：3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。很多时候，我们为了满足第三范式往往会把一张表分成多张表。</p><h4 id="范式化设计优缺点"><a class="markdownIt-Anchor" href="#范式化设计优缺点"></a> 范式化设计优缺点:</h4><p><strong>优点:</strong><br>可以尽量得减少数据冗余，使得更新快，体积小<br>缺点:对于查询需要多个表进行关联，减少写得效率增加读得效率，更难进行索引优化<br><strong>反范式化:</strong><br>优点:可以减少表得关联，可以更好得进行索引优化<br>缺点:数据冗余以及数据异常，数据得修改需要更多的成本</p><h4 id="什么是基本表什么是视图"><a class="markdownIt-Anchor" href="#什么是基本表什么是视图"></a> <strong>什么是基本表？什么是视图？</strong></h4><p>基本表是本身独立存在的表，在 SQL 中一个关系就对应一个表。 视图是从一个或几个基本表导出的表。视图本身不独立存储在数据库中，是一个虚表</p><h4 id="试述视图的优点"><a class="markdownIt-Anchor" href="#试述视图的优点"></a> <strong>试述视图的优点？</strong></h4><ol><li><p>视图能够简化用户的操作。</p></li><li><p>视图使用户能以多种角度看待同一数据。</p></li><li><p>视图对重构数据库提供了一定程度的逻辑独立性。</p></li><li><p>视图能够对机密数据提供安全保护。</p></li><li><p>适当利用视图可以更清晰的表达查询。</p></li></ol><h4 id="null是什么意思"><a class="markdownIt-Anchor" href="#null是什么意思"></a> <strong>NULL是什么意思</strong></h4><p>NULL这个值表示UNKNOWN(未知):它不表示 &quot; &quot; (空字符串)。对NULL这个值的任何比较都会生产一个NULL值。您不能把任何值与一个 NULL值进行比较，并在逻辑上希望获得一个答案。</p><p>使用IS NULL来进行NULL判断</p><h4 id="主键-外键和索引的区别"><a class="markdownIt-Anchor" href="#主键-外键和索引的区别"></a> <strong>主键、外键和索引的区别？</strong></h4><h4 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> <strong>定义：</strong></h4><p>主键–唯一标识一条记录，不能有重复的，不允许为空</p><p>外键–表的外键是另一表的主键, 外键可以有重复的, 可以是空值</p><p>索引–该字段没有重复值，但可以有一个空值</p><h4 id="作用"><a class="markdownIt-Anchor" href="#作用"></a> <strong>作用：</strong></h4><p>主键–用来保证数据完整性</p><p>外键–用来和其他表建立联系用的</p><p>索引–是提高查询排序的速度</p><h4 id="个数"><a class="markdownIt-Anchor" href="#个数"></a> <strong>个数：</strong></h4><p>主键–主键只能有一个</p><p>外键–一个表可以有多个外键</p><p>索引–一个表可以有多个唯一索引</p><h4 id="你可以用什么来确保表格里的字段只接受特定范围里的值"><a class="markdownIt-Anchor" href="#你可以用什么来确保表格里的字段只接受特定范围里的值"></a> <strong>你可以用什么来确保表格里的字段只接受特定范围里的值?</strong></h4><p>答：Check限制，它在数据库表格里被定义，用来限制输入该列的值。</p><p>触发器也可以被用来限制数据库表格里的字段能够接受的值，但是这种办法要求触发器在表格里被定义，这可能会在某些情况下影响到性能。</p><h4 id="说说对sql语句优化有哪些方法选择几条"><a class="markdownIt-Anchor" href="#说说对sql语句优化有哪些方法选择几条"></a> <strong>说说对SQL语句优化有哪些方法？（选择几条）</strong></h4><p>（1）Where子句中：where表之间的连接必须写在其他Where条件之前，那些可以过滤掉最大数量记录的条件必须写在Where子句的末尾.HAVING最后。</p><p>（2）用EXISTS替代IN、用NOT EXISTS替代NOT IN。</p><p>（3）避免在索引列上使用计算</p><p>（4）避免在索引列上使用IS NULL和IS NOT NULL</p><p>（5）对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p><p>（6）应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描</p><p>（7）应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描</p><h4 id="on与where"><a class="markdownIt-Anchor" href="#on与where"></a> on与where</h4><p>sql连接方式为嵌套循环连接。一层一层的连接，循环用外层结果集的记录行和内层的所有符合条件ON条件的记录依次连接，内层没有符合条件的生成所有字段为null的记录行，当不存在ON条件是以“笛卡尔积”的形式连接。连接过后where过滤，再连接，在过滤，直到左右表均连接完毕。连接完毕后有group by字句则执行分组，有having字句的则对分组后的结果集再过滤，所以having执行在where之后，因此有些条件放where字句内能缩小分组前的结果集，提高执行效率。之后还有order by字句的则执行排序，最后得到查询的结果。</p><p>where里可能有关于每张表的筛选条件，不同表的条件生效时期不同。对于驱动表，在执行一开始就会通过where上关于词表的条件筛选一条或者一批记录，然后通过on条件关联下一张表，将得到的结果集再用where上第二张表的条件做过滤，然后重复此过程直到所有表关联完毕。也就是对于驱动表，因为只有where生效，对于其他被驱动表，先被on关联，也就是on先生效，然后再用where过滤关联的结果集。同时对于外表连接，比如left join和right join，把条件放在on上，如果被关联表没有匹配上，那么外表还是能放入结果集的；而如果将条件放在where上，因为where是对关联后的结果做过滤，此时之前匹配的记录也会被筛选掉。<a href="https://blog.csdn.net/qq_27529917/article/details/87954427" target="_blank" rel="noopener">thanks</a></p><h4 id="sql-and-nosql"><a class="markdownIt-Anchor" href="#sql-and-nosql"></a> sql and nosql</h4><p>SQL (Structured Query Language) 数据库，指关系型数据库。主要代表：SQL Server，Oracle，MySQL，PostgreSQL。</p><p>NoSQL（Not Only SQL）泛指非关系型数据库。主要代表：MongoDB，Redis，CouchDB。</p><h5 id="sql优点"><a class="markdownIt-Anchor" href="#sql优点"></a> sql优点</h5><ol><li>事务处理—保持数据的一致性</li><li>由于以标准化为前提，数据更新的开销很小（相同的字段基本上只有一处）</li><li>可以进行Join等复杂查询</li></ol><h5 id="sql缺点"><a class="markdownIt-Anchor" href="#sql缺点"></a> sql缺点</h5><ol><li>扩展困难：由于存在类似Join这样多表查询机制，使得数据库在扩展方面很艰难;</li><li>读写慢：这种情况主要发生在数据量达到一定规模时由于关系型数据库的系统逻辑非常复杂，使得其非常容易发生死锁等的并发问题，所以导致其读写速度下滑非常严重</li><li>成本高：企业级数据库的License价格很惊人，并且随着系统的规模，而不断上升</li></ol><h5 id="nosql优点"><a class="markdownIt-Anchor" href="#nosql优点"></a> nosql优点</h5><ol><li>Nosql的存储方式灵活，NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是一个噩梦。这点在大数据量的web2.0时代尤其明显。</li><li>简单的扩展：典型例子是Cassandra，由于其架构是类似于经典的P2P，所以能通过轻松地添加新的节点来扩展这个集群</li><li>快速的读写：主要例子有Redis，由于其逻辑简单，而且纯内存操作，使得其性能非常出色，单节点每秒可以处理超过10万次读写操作</li><li>低廉的成本：这是大多数分布式数据库共有的特点，因为主要都是开源软件，没有昂贵的License成本</li></ol><p><a href="https://blog.csdn.net/xlgen157387/article/details/47908797" target="_blank" rel="noopener">thanks</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;mysql中有哪几种锁&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mysql中有哪几种锁&quot;&gt;&lt;/a&gt; &lt;strong&gt;Mysql中有哪几种锁？&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;表级锁：开销小，加锁快；不会出现死
      
    
    </summary>
    
      <category term="数据库" scheme="https://ghostlo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="面试" scheme="https://ghostlo.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="mysql" scheme="https://ghostlo.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>并发</title>
    <link href="https://ghostlo.github.io/2019/04/06/%E5%B9%B6%E5%8F%91/"/>
    <id>https://ghostlo.github.io/2019/04/06/并发/</id>
    <published>2019-04-06T13:47:29.000Z</published>
    <updated>2019-04-08T13:33:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>什么是并发：</strong> 并发是指多个执行任务同时、在一个较长的时间段内可认为是<strong>并行</strong>被执行。<br><strong>什么是并行：</strong> 并行就是指多个任务同时执行<br><strong>什么是竞态：</strong> 字面意思是竞争，并发的执行单元对共享资源（硬件资源和软件上的全局变量，静态变量等）的访问容易发生竞态。<br>对于一个虚拟的字符设备驱动，假设一个执行单元A对其写入300个字符‘a’，而另一个执行单元B对其写入300个字符‘b’，第三个执行单元读取所有字符。如果A、B被顺序串行执行那么C读出的则不会出错，但如果A、B并发执行，那结果则是我们不可料想的。<br><strong>竞态发生的情况</strong><br><strong>对称多处理器（SMP）的多个CPU：</strong> SMP是一种紧耦合、共享存储的系统模型，它的特点是多个CPU使用共同的系统总线，因此可以访问共同的外设和存储器。<br><strong>单CPU内进程与抢占它的进程：</strong> Linux 2.6的内核支持抢占调度，一个进程在内核执行的时候可能被另一高优先级进程打断。<br><strong>中断（硬中断、软中断、tasklet、低半部）与进程之间：<strong>中断可以打断正在执行的进程，处理中断的程序和被打断的进程间也可能发生竞态。<br><strong>竞态的解决办法</strong><br>解决竞态问题的途径是保证对共享资源的互斥访问。访问共享资源的代码区域称为</strong>临界区</strong>，临界区要互斥机制保护。Linux设备驱动中常见的互斥机制有以下方式：中断屏蔽、原子操作、自旋锁和信号量等。</p><h3 id="临界区"><a class="markdownIt-Anchor" href="#临界区"></a> 临界区</h3><p>Most readers would agree that this scenario is best avoided.<br>Therefore, the core rule that applies to spinlocks is that any code<br>must, while holding a spinlock, be <a href="http://atomic.It" target="_blank" rel="noopener">atomic.It</a> cannot sleep; in fact, it<br>cannot relinquish the processor for any reason except toservice<br>interrupts (and sometimes not even then).</p><h3 id="互斥锁和自旋锁-信号量的区别"><a class="markdownIt-Anchor" href="#互斥锁和自旋锁-信号量的区别"></a> 互斥锁和自旋锁、信号量的区别</h3><p><strong>互斥锁和互斥量</strong> 在我的理解里没啥区别，不同叫法。广义上讲可以值所有实现互斥作用的同步机制。狭义上讲指的就是mutex这种特定的二元锁机制。互斥锁的作用就是互斥，mutual exclusive，<strong>是用来保护临界区(critical section)的</strong> 。所谓临界区就是代码的一个区间，如果两个线程同时执行就有可能出问题，所以需要互斥锁来保护。</p><p><strong>信号量（semaphore）</strong> 是一种更高级的同步机制，<strong>mutex（互斥锁）</strong> 可以说是 <strong>semaphore（信号量）</strong> 在仅取值0/1时的特例。Semaphore可以有更多的取值空间，用来实现更加复杂的同步，而不单单是线程间互斥。</p><p><strong>程序运行状态</strong> 开始 运行 就绪 阻塞 结束</p><p>互斥锁：常用，使用后需要的程序进入就绪态，通常情况下锁操作失败会将该线程睡眠等待锁释放时被唤醒，用于互斥，信号量用于同步</p><p>自旋锁：相比一般的互斥锁会在等待期间放弃cpu，使用硬件提供的swap指令或test_and_set指令实现，自旋锁则是不断循环并测试锁的状态，这样就一直占着cpu。所以相比于自旋锁和信号量，在申请锁失败的话，自旋锁会不断的查询，申请线程不会进入休眠，信号量和互斥锁如果申请锁失败的话线程进入休眠，如果申请锁被释放后会唤醒休眠的线程。可以联想到程序查询中断方式。</p><p>递归锁：严格上讲递归锁只是互斥锁的一个特例，同样只能有一个线程访问该对象，但允许同一个线程在未释放其拥有的锁时反复对该锁进行加锁操作，直到一个线程所有的acquire都被release，其他的线程才能获得资源。 windows下的临界区默认是支持递归锁的，而linux下的互斥量则需要设置参数PTHREAD_MUTEX_RECURSIVE_NP，默认则是不支持。</p><p>读写锁(rwlock)：高级别锁，区分读和写，符合条件时允许多个线程访问对象。处于读锁操作时可以允许其他线程和本线程的读锁， 但不允许写锁， 处于写锁时则任何锁操作都会睡眠等待；常见的操作系统会在写锁等待时屏蔽后续的读锁操作以防写锁被无限孤立而等待，在操作系统不支持情况下可以用引用计数加写优先等待来用互斥锁实现。 读写锁适用于大量读少量写的环境，但由于其特殊的逻辑使得其效率相对普通的互斥锁和自旋锁要慢一个数量级；值得注意的一点是按POSIX标准 在线程申请读锁并未释放前本线程申请写锁是成功的，但运行后的逻辑结果是无法预测</p><p>另外注意并发时候stl的改变</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;什么是并发：&lt;/strong&gt; 并发是指多个执行任务同时、在一个较长的时间段内可认为是&lt;strong&gt;并行&lt;/strong&gt;被执行。&lt;br&gt;
&lt;strong&gt;什么是并行：&lt;/strong&gt; 并行就是指多个任务同时执行&lt;br&gt;
&lt;strong&gt;什么是竞态：&lt;/
      
    
    </summary>
    
      <category term="操作系统" scheme="https://ghostlo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="并发" scheme="https://ghostlo.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>数据库事务的四大特性以及事务的隔离级别</title>
    <link href="https://ghostlo.github.io/2019/04/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7%E4%BB%A5%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>https://ghostlo.github.io/2019/04/06/数据库事务的四大特性以及事务的隔离级别/</id>
    <published>2019-04-06T08:38:07.000Z</published>
    <updated>2019-04-09T02:23:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库的四个特性"><a class="markdownIt-Anchor" href="#数据库的四个特性"></a> 数据库的四个特性</h2><p>如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：</p><h3 id="原子性atomicity"><a class="markdownIt-Anchor" href="#原子性atomicity"></a> 原子性（Atomicity）</h3><p>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p><h3 id="一致性consistency"><a class="markdownIt-Anchor" href="#一致性consistency"></a> 一致性（Consistency）</h3><p>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><p>拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p><h3 id="隔离性isolation"><a class="markdownIt-Anchor" href="#隔离性isolation"></a> 隔离性（Isolation）</h3><p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p><p>关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p><h3 id="持久性durability"><a class="markdownIt-Anchor" href="#持久性durability"></a> 持久性（Durability）</h3><p>持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><p>例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p><p>以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p><h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><h3 id="脏读"><a class="markdownIt-Anchor" href="#脏读"></a> 脏读</h3><p>脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p><p>当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update account set money=money+100 where name=’B’;  (此时A通知B)</span><br><span class="line"></span><br><span class="line">update account set money=money - 100 where name=’A’;</span><br></pre></td></tr></table></figure><p>当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。</p><h3 id="不可重复读"><a class="markdownIt-Anchor" href="#不可重复读"></a> 不可重复读</h3><p>不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。</p><p>例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p><p>不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</p><p>在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……</p><h3 id="虚读幻读"><a class="markdownIt-Anchor" href="#虚读幻读"></a> 虚读(幻读)</h3><p>幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p><p>幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</p><h2 id="范式"><a class="markdownIt-Anchor" href="#范式"></a> 范式</h2><p>第一范式：1NF是对属性的原子性约束，要求属性具有原子性，不可再分解；</p><p>第二范式：2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性,为实现区分通常需要我们设计一个主键来实现</p><p>第三范式：3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。很多时候，我们为了满足第三范式往往会把一张表分成多张表。</p><h2 id="隔离级别"><a class="markdownIt-Anchor" href="#隔离级别"></a> 隔离级别</h2><p>现在来看看MySQL数据库为我们提供的四种隔离级别：</p><h3 id="serializable-串行化"><a class="markdownIt-Anchor" href="#serializable-串行化"></a> Serializable (串行化)</h3><p>可避免脏读、不可重复读、幻读的发生。</p><h3 id="repeatable-read-可重复读"><a class="markdownIt-Anchor" href="#repeatable-read-可重复读"></a> Repeatable read (可重复读)</h3><p>可避免脏读、不可重复读的发生。</p><h3 id="read-committed-读已提交"><a class="markdownIt-Anchor" href="#read-committed-读已提交"></a> Read committed (读已提交)</h3><p>可避免脏读的发生。</p><h3 id="read-uncommitted-读未提交"><a class="markdownIt-Anchor" href="#read-uncommitted-读未提交"></a> Read uncommitted (读未提交)</h3><p>最低级别，任何情况都无法保证。</p><p>以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。</p><p>在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)；而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。</p><p>在MySQL数据库中查看当前事务的隔离级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@tx_isolation;</span><br></pre></td></tr></table></figure><p>在MySQL数据库中设置事务的隔离 级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set  [glogal | session]  transaction isolation level 隔离级别名称;</span><br><span class="line"></span><br><span class="line">set tx_isolation=’隔离级别名称;’</span><br></pre></td></tr></table></figure><p>例1：查看当前事务的隔离级别：</p><p><img src="%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7%E4%BB%A5%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/787876-20160313202200007-1111796802.png" alt></p><p>例2：将事务的隔离级别设置为Read uncommitted级别：</p><p><img src="%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7%E4%BB%A5%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/787876-20160313202224241-2101542210.png" alt></p><p>或：</p><p><img src="%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7%E4%BB%A5%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/787876-20160313202245210-345198166.png" alt></p><p>记住：设置数据库的隔离级别一定要是在开启事务之前！</p><p>如果是使用JDBC对数据库的事务设置隔离级别的话，也应该是在调用Connection对象的setAutoCommit(false)方法之前。调用Connection对象的setTransactionIsolation(level)即可设置当前链接的隔离级别，至于参数level，可以使用Connection对象的字段：</p><p><img src="%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7%E4%BB%A5%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/787876-20160313202333460-377269897.png" alt></p><p>在JDBC中设置隔离级别的部分代码：</p><p><img src="%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7%E4%BB%A5%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/787876-20160313202355694-2106931487.png" alt></p><p>后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。</p><p>参考博客：</p><p><a href="http://www.zhihu.com/question/23989904" target="_blank" rel="noopener">http://www.zhihu.com/question/23989904</a></p><p><a href="http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html</a></p><p><a href="http://www.cnblogs.com/xdp-gacl/p/3984001.html" target="_blank" rel="noopener">http://www.cnblogs.com/xdp-gacl/p/3984001.html</a></p><p><a href="https://www.cnblogs.com/fjdingsd/p/5273008.html" target="_blank" rel="noopener">来源</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库的四个特性&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据库的四个特性&quot;&gt;&lt;/a&gt; 数据库的四个特性&lt;/h2&gt;
&lt;p&gt;如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：&lt;/p&gt;
&lt;h3 id=&quot;原子性ato
      
    
    </summary>
    
      <category term="数据库" scheme="https://ghostlo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://ghostlo.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mysql" scheme="https://ghostlo.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>面试--抛棋子</title>
    <link href="https://ghostlo.github.io/2019/04/06/%E9%9D%A2%E8%AF%95-%E6%8A%9B%E6%A3%8B%E5%AD%90/"/>
    <id>https://ghostlo.github.io/2019/04/06/面试-抛棋子/</id>
    <published>2019-04-06T08:36:07.000Z</published>
    <updated>2019-04-14T13:51:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><p>有一个一百层高的大厦，从这个大厦的某一层扔下棋子恰好就会碎（称这一层为临界层）。请你用手中的两个玻璃围棋子，找出一个最优的策略来得出那个最优层。<br>分析：题目要求策略最优，因而要使得在最坏的情况下投掷的总次数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mi mathvariant="normal">​</mi></mrow><annotation encoding="application/x-tex">T_{max}​</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">​</span></span></span></span> 最少。首先考虑只有一个棋子的情况，条件若为多个棋子则可转化为一个棋子的情况。</p><h2 id="解答"><a class="markdownIt-Anchor" href="#解答"></a> 解答</h2><h3 id="一个棋子"><a class="markdownIt-Anchor" href="#一个棋子"></a> 一个棋子</h3><p>棋子必须在临界层扔下的时候碎，所以唯一的策略是从1层往上逐层投掷，此时<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mn>99</mn></mrow><annotation encoding="application/x-tex">T_{max} =99</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">9</span></span></span></span>，临界层为99层或100层（因为题目告诉100层肯定会碎，如果99层没碎，那表示临界层即为100）</p><h3 id="两个棋子"><a class="markdownIt-Anchor" href="#两个棋子"></a> 两个棋子</h3><p>利用多的这个棋子缩小查找的范围，因而把100层分成若干段：先利用一个棋子来确定临界层所在的段，再利用另一个棋子确定临界层，总的投掷次数等于确定临界段的次数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和确定临界层的次数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的和<br>现把100层平均分成n段（n是100的正因数），有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mfrac><mn>100</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mi>n</mi><mo>+</mo><mfrac><mn>100</mn><mi>n</mi></mfrac><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">T_{max}= (n-1) + \frac{100}{n-1} = n + \frac{100}{n}-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>由均值不等式可知n=10时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mn>18</mn></mrow><annotation encoding="application/x-tex">T_{max} =18</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">8</span></span></span></span>为最小值，此时临界段为第80~90层，临界层为第89层。如果把100层分成12段<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mn>100</mn><mo>=</mo><mn>9</mn><mo>×</mo><mn>11</mn><mo>+</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">(100=9\times 11+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>：1<sub>9,10</sub>18,…91~99,100,与上述n=10的情况相比虽然每段的层数在减少（从而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在减少），但所分的段数在增加（从而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在增加），因而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>并没有减少。如果把100层分成其他段（比如9段：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>100</mn><mo>=</mo><mn>12</mn><mo>×</mo><mn>8</mn><mo>+</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">100=12\times 8+4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>，情况也是如此.<br>根据上面的讨论，如何把100层合理地分段是关键。上述对100层所分段数的调整并没有使得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mn>18</mn></mrow><annotation encoding="application/x-tex">T_{max} =18</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">8</span></span></span></span>减少的原因在于每段包含的层数比较均匀(图1)，因而出现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>此消彼长的情况。鉴于此我们做出以下方式的调整：<br>把100层分成若干段，从下往上，每段的层数逐渐少1（图2），这样就使得在最坏的情况下，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>增加1的同时<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>减少1，因而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的总和不变（等于第一段的层数n）,为确定n的值，只需要解不等式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo>)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mn>1</mn><mo>≥</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">n+(n-1)+(n-2)+...+1\geq 100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,从而得到n=14<br>从第14层开始扔第一枚棋子，如果没有碎则从第14+13=27层开始扔，如果还没有碎则从14+13+12=39层开始扔，以此类推，此时<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mn>14</mn></mrow><annotation encoding="application/x-tex">T_{max} =14</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">4</span></span></span></span>,临界层可为第27层，第39层，…第99层。</p><h2 id="拓展"><a class="markdownIt-Anchor" href="#拓展"></a> 拓展：</h2><p>对于m层楼高，k个球的扔棋子问题，又该怎么做？<br>答案是用动态规划的思想：如果是三个棋子，100层楼，我扔了一次棋子碎了以后，就变成2个棋子的问题了，因此可以利用上面的结果： $（x*(x-1)/2+((x-1)*(x-2)/2)+…+3+1&gt;=100. $</p><h3 id="推广"><a class="markdownIt-Anchor" href="#推广"></a> 推广</h3><p>从上面的讨论可以发现此题的关键是（高阶）等差数列：<br>两个棋子：1 2 3 4 5… $ \sum_{i=1}<sup>{n}{C_{i}</sup>{1} \geq }100 $  !<br>三个棋子：1 3 6 10 15… $ \sum_{i=2}<sup>{n}{C_{i}</sup>{2} }\geq 100 $<br>因而我们还可以考虑大楼有m层，棋子有k个的情况 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>k</mi></mrow><mi>n</mi></msubsup><msubsup><mi>C</mi><mi>i</mi><mi>k</mi></msubsup><mo>≥</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">\sum_{ i=k}^{n}{C_{i}^{k} }  \geq m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.148818em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-2.441336em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span><br>算法证明：对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 层楼，k个棋子的问题，存在复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mroot><mi>m</mi><mi>y</mi></mroot><mo>)</mo></mrow><annotation encoding="application/x-tex">O(\sqrt[y]{m})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5516160000000001em;"><span style="top:-2.836336em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">m</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的算法。</p><p><a href="http://stevenshi.me/2017/06/26/hexo-insert-formula/" target="_blank" rel="noopener">thanks</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#问题&quot;&gt;&lt;/a&gt; 问题&lt;/h2&gt;
&lt;p&gt;有一个一百层高的大厦，从这个大厦的某一层扔下棋子恰好就会碎（称这一层为临界层）。请你用手中的两个玻璃围棋子，找出一个最优的策略来得出那个最优层。
      
    
    </summary>
    
      <category term="面试" scheme="https://ghostlo.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="建模" scheme="https://ghostlo.github.io/tags/%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="数学" scheme="https://ghostlo.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>cookie 与 session 的区别</title>
    <link href="https://ghostlo.github.io/2019/04/04/cookie-%E4%B8%8E-session-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://ghostlo.github.io/2019/04/04/cookie-与-session-的区别/</id>
    <published>2019-04-04T12:26:55.000Z</published>
    <updated>2019-04-04T12:29:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://link.juejin.im/?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzA4MjA0MTc4NQ%3D%3D%26mid%3D504090000%26idx%3D3%26sn%3Df57d4f194c902daadd80296d5b8ed001%23rd" target="_blank" rel="noopener">mp.weixin.qq.com</a></p><p>本文分别对Cookie与Session做一个介绍和总结，并分别对两个知识点进行对比分析，让大家对Cookie和Session有一个更深入的了解，并对自己的开发工作中灵活运用带来启示。</p><h2 id="cookie机制"><a class="markdownIt-Anchor" href="#cookie机制"></a> <strong>cookie机制</strong></h2><p>Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器。IETF RFC 2965 HTTP State Management Mechanism 是通用cookie规范。网络服务器用HTTP头向客户端发送cookies，在客户终端，浏览器解析这些cookies并将它们保存为一个本地文件，它会自动将同一服务器的任何请求缚上这些cookies 。</p><p>具体来说cookie机制采用的是在客户端保持状态的方案。它是在用户端的会话状态的存贮机制，他需要用户打开客户端的cookie支持。cookie的作用就是为了解决HTTP协议无状态的缺陷所作的努力。</p><p>正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。</p><p>cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。</p><p>而session机制采用的是一种在服务器端保持状态的解决方案。同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的。而session提供了方便管理全局变量的方式 。</p><p>session是针对每一个用户的，变量的值保存在服务器上，用一个sessionID来区分是哪个用户session变量,这个值是通过用户的浏览器在访问的时候返回给服务器，当客户禁用cookie时，这个值也可能设置为由get来返回给服务器。</p><p>就安全性来说：当你访问一个使用session 的站点，同时在自己机子上建立一个cookie，建议在服务器端的session机制更安全些，因为它不会任意读取客户存储的信息。</p><h2 id="session机制"><a class="markdownIt-Anchor" href="#session机制"></a> <strong>session机制</strong></h2><p>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。</p><p>当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。</p><p>保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发挥给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。</p><p>经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。</p><p>Cookie与Session都能够进行会话跟踪，但是完成的原理不太一样。普通状况下二者均能够满足需求，但有时分不能够运用Cookie，有时分不能够运用Session。下面经过比拟阐明二者的特性以及适用的场所。</p><h2 id="不同"><a class="markdownIt-Anchor" href="#不同"></a> 不同</h2><h3 id="1-存取方式的不同"><a class="markdownIt-Anchor" href="#1-存取方式的不同"></a> <strong>1、存取方式的不同</strong></h3><p>Cookie中只能保管ASCII字符串，假如需求存取Unicode字符或者二进制数据，需求先进行编码。Cookie中也不能直接存取Java对象。若要存储略微复杂的信息，运用Cookie是比拟艰难的。</p><p>而Session中能够存取任何类型的数据，包括而不限于String、Integer、List、Map等。Session中也能够直接保管Java Bean乃至任何Java类，对象等，运用起来十分便当。能够把Session看做是一个Java容器类。</p><h3 id="2-隐私策略的不同"><a class="markdownIt-Anchor" href="#2-隐私策略的不同"></a> <strong>2、隐私策略的不同</strong></h3><p>Cookie存储在客户端阅读器中，对客户端是可见的，客户端的一些程序可能会窥探、复制以至修正Cookie中的内容。而Session存储在服务器上，对客户端是透明的，不存在敏感信息泄露的风险。</p><p>假如选用Cookie，比较好的方法是，敏感的信息如账号密码等尽量不要写到Cookie中。最好是像Google、Baidu那样将Cookie信息加密，提交到服务器后再进行解密，保证Cookie中的信息只要本人能读得懂。而假如选择Session就省事多了，反正是放在服务器上，Session里任何隐私都能够有效的保护。</p><h3 id="3-有效期上的不同"><a class="markdownIt-Anchor" href="#3-有效期上的不同"></a> <strong>3、有效期上的不同</strong></h3><p>使用过Google的人都晓得，假如登录过Google，则Google的登录信息长期有效。用户不用每次访问都重新登录，Google会持久地记载该用户的登录信息。要到达这种效果，运用Cookie会是比较好的选择。只需要设置Cookie的过期时间属性为一个很大很大的数字。</p><p>由于Session依赖于名为JSESSIONID的Cookie，而Cookie JSESSIONID的过期时间默许为–1，只需关闭了阅读器该Session就会失效，因而Session不能完成信息永世有效的效果。运用URL地址重写也不能完成。而且假如设置Session的超时时间过长，服务器累计的Session就会越多，越容易招致内存溢出。</p><h3 id="4-服务器压力的不同"><a class="markdownIt-Anchor" href="#4-服务器压力的不同"></a> <strong>4、服务器压力的不同</strong></h3><p>Session是保管在服务器端的，每个用户都会产生一个Session。假如并发访问的用户十分多，会产生十分多的Session，耗费大量的内存。因而像Google、Baidu、Sina这样并发访问量极高的网站，是不太可能运用Session来追踪客户会话的。</p><p>而Cookie保管在客户端，不占用服务器资源。假如并发阅读的用户十分多，Cookie是很好的选择。关于Google、Baidu、Sina来说，Cookie或许是唯一的选择。</p><h3 id="5-浏览器支持的不同"><a class="markdownIt-Anchor" href="#5-浏览器支持的不同"></a> <strong>5、浏览器支持的不同</strong></h3><p>Cookie是需要客户端浏览器支持的。假如客户端禁用了Cookie，或者不支持Cookie，则会话跟踪会失效。关于WAP上的应用，常规的Cookie就派不上用场了。</p><p>假如客户端浏览器不支持Cookie，需要运用Session以及URL地址重写。需要注意的是一切的用到Session程序的URL都要进行URL地址重写，否则Session会话跟踪还会失效。关于WAP应用来说，Session+URL地址重写或许是它唯一的选择。</p><p>假如客户端支持Cookie，则Cookie既能够设为本浏览器窗口以及子窗口内有效（把过期时间设为–1），也能够设为一切阅读器窗口内有效（把过期时间设为某个大于0的整数）。但Session只能在本阅读器窗口以及其子窗口内有效。假如两个浏览器窗口互不相干，它们将运用两个不同的Session。（IE8下不同窗口Session相干）</p><h3 id="6-跨域支持上的不同"><a class="markdownIt-Anchor" href="#6-跨域支持上的不同"></a> <strong>6、跨域支持上的不同</strong></h3><p>Cookie支持跨域名访问，例如将domain属性设置为“.biaodianfu.com”，则以“.biaodianfu.com”为后缀的一切域名均能够访问该Cookie。跨域名Cookie如今被普遍用在网络中，例如Google、Baidu、Sina等。而Session则不会支持跨域名访问。Session仅在他所在的域名内有效。</p><p>仅运用Cookie或者仅运用Session可能完成不了理想的效果。这时应该尝试一下同时运用Cookie与Session。Cookie与Session的搭配运用在实践项目中会完成很多意想不到的效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接：&lt;a href=&quot;https://link.juejin.im/?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzA4MjA0MTc4NQ%3D%3D%26mid%3D504090000%26idx%3D3
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>同步异步阻塞非阻塞</title>
    <link href="https://ghostlo.github.io/2019/04/04/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5%E9%98%BB%E5%A1%9E%E9%9D%9E%E9%98%BB%E5%A1%9E/"/>
    <id>https://ghostlo.github.io/2019/04/04/同步异步阻塞非阻塞/</id>
    <published>2019-04-04T12:26:17.000Z</published>
    <updated>2019-04-04T12:26:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="同步"><a class="markdownIt-Anchor" href="#同步"></a> 同步：</h3><p>所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事。</p><p>例如普通B/S模式（同步）：提交请求-&gt;等待服务器处理-&gt;处理完毕返回 这个期间客户端浏览器不能干任何事</p><h3 id="异步"><a class="markdownIt-Anchor" href="#异步"></a> 异步：</h3><p>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。</p><p>例如 ajax请求（异步）: 请求通过事件触发-&gt;服务器处理（这是浏览器仍然可以作其他事情）-&gt;处理完毕</p><h3 id="阻塞"><a class="markdownIt-Anchor" href="#阻塞"></a> 阻塞：</h3><p>阻塞调用是指调用结果返回之前，当前线程会被挂起（线程进入非可执行状态，在这个状态下，cpu不会给线程分配时间片，即线程暂停运行）。函数只有在得到结果之后才会返回。</p><p>有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回,它还会抢占cpu去执行其他逻辑，也会主动检测io是否准备好。</p><h3 id="非阻塞"><a class="markdownIt-Anchor" href="#非阻塞"></a> 非阻塞：</h3><p>非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。</p><p>再简单点理解就是：</p><ol><li>同步，就是我调用一个功能，该功能没有结束前，我死等结果。</li><li>异步，就是我调用一个功能，不需要知道该功能结果，该功能有结果后通知我（回调通知）。</li><li>阻塞，就是调用我（函数），我（函数）没有接收完数据或者没有得到结果之前，我不会返回。</li><li>非阻塞，就是调用我（函数），我（函数）立即返回，通过select通知调用者</li></ol><p>同步IO和异步IO的区别就在于：数据拷贝的时候进程是否阻塞</p><p>阻塞IO和非阻塞IO的区别就在于：应用程序的调用是否立即返回</p><p>综上可知，同步和异步,阻塞和非阻塞,有些混用,其实它们完全不是一回事,而且它们修饰的对象也不相同。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;同步&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#同步&quot;&gt;&lt;/a&gt; 同步：&lt;/h3&gt;
&lt;p&gt;所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo 安装</title>
    <link href="https://ghostlo.github.io/2019/04/04/%E5%AE%89%E8%A3%85-Hexo/"/>
    <id>https://ghostlo.github.io/2019/04/04/安装-Hexo/</id>
    <published>2019-04-04T11:38:48.000Z</published>
    <updated>2019-04-07T11:57:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>首先安装如下两个包</p><ul><li><p><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></p></li><li><p><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></p></li></ul><p>安装好之后初次运行Git需要做一些配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档</a></p><h3 id="npm安装时改源"><a class="markdownIt-Anchor" href="#npm安装时改源"></a> npm安装时改源</h3><p>npm 安装报错 rollbackFailedOptional verb npm-session 解决办法</p><p>npm config set registry <a href="http://registry.npm.taobao.org" target="_blank" rel="noopener">http://registry.npm.taobao.org</a></p><h2 id="建站"><a class="markdownIt-Anchor" href="#建站"></a> 建站</h2><p><code>Hexo</code>安装好了之后，就开始进行建站。打开终端<code>cd</code>到桌面并使用如下命令即可建好</p><blockquote><p>hexo init <code>name</code><br>cd <code>name</code></p></blockquote><h3 id="常用参数"><a class="markdownIt-Anchor" href="#常用参数"></a> 常用参数</h3><p><em>clean</em>     Remove generated files and cache.</p><p><em>deploy</em>    Deploy your website.</p><p><em>generate</em>  Generate static files.</p><p><em>help</em>      Get help on a command.</p><p><em>init</em>      Create a new Hexo folder.</p><p><em>new</em>       Create a new post.</p><p><em>server</em>    Start the server.</p><h3 id="deploy注意事项"><a class="markdownIt-Anchor" href="#deploy注意事项"></a> deploy注意事项</h3><p>1:排查-&gt;是否安装一下hexo-deployer-git这个模块<br>没有安装:<code>npm install hexo-deployer-git --save</code>使用指令安装<br>2:排查-&gt;_config.yml 这个文件的deploy写了没有;写全了没有<br>我的就是因为_config.yml中deploy下的type等前面没有空格导致。。。。。</p><p>hexo d 提示You should configure deployment settings in _config.yml first!</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type:</span><br><span class="line">    repo:</span><br></pre></td></tr></table></figure><p>hexo d/deploy 时遇到问题再试一次，可能是用户名密码没有来得及输入，，</p><h3 id="主题"><a class="markdownIt-Anchor" href="#主题"></a> 主题</h3><p><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">next主题</a></p><h3 id="deploy后github上未显示主题"><a class="markdownIt-Anchor" href="#deploy后github上未显示主题"></a> deploy后github上未显示主题</h3><p>If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child" target="_blank" rel="noopener">http://yoursite.com/child</a>’ and root as ‘/child/’<br>url: <a href="https://ghostlo.github.io/ostlo">https://ghostlo.github.io/ostlo</a><br>root: /ostlo/</p><h2 id="后续"><a class="markdownIt-Anchor" href="#后续"></a> 后续</h2><p>后续的修改只需要重复第5步就可以了，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd 本地库目录</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;版本日志&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><a href="https://juejin.im/post/5b655c595188251b134e97dd" target="_blank" rel="noopener">Hexo 配置1</a></p><p><a href="https://www.jianshu.com/p/3a05351a37dc" target="_blank" rel="noopener">Hexo 配置2</a></p><p>GitHub还有很多好功能有待开发，善于利用搜索引擎，have fun~</p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">推荐阅读</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装&quot;&gt;&lt;/a&gt; 安装&lt;/h2&gt;
&lt;p&gt;首先安装如下两个包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="建站" scheme="https://ghostlo.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="https://ghostlo.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
